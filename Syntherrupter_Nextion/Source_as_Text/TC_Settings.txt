Page TC_Settings
    Attributes
        ID               : 0
        Scope            : local
        Send Component ID: disabled
        Locked           : no
    
    Events
        Preinitialize Event
            // Prevent page refreshs until postinit
            ref_stop
            //
            // Load colors
            click fLoadColors,1
            click fLoadModes,1
            //
            // Display username
            if(User_Settings.userNum.val==0)
            {
                tUser.txt=" "+User_Settings.u0Name.txt
            }else if(User_Settings.userNum.val==1)
            {
                tUser.txt=" "+User_Settings.u1Name.txt
            }else if(User_Settings.userNum.val==2)
            {
                tUser.txt=" "+User_Settings.u2Name.txt
            }
            //
            vis fLoadModes,0
            vis fLoadColors,0
            vis fCheck,0
            vis fSysex,0
            vis fDraw,0
            vis tu,0
            //
            // Properly hide the help stuff.
            vis hHelp,0
            vis tHelp,0
            //
            // This page should only be accessible for user 2.
            // Power on default for all MIDI channel assignments and active coils is 1 (all assigned and active).
            //
            // Load global variable values into local variables. Note: Since a component consists of many different properties (like font size, color, position, ...) its memory footprint is much larger and it should not be global.
            // Since min offtime and max MIDI voices are not used elsewhere in the GUI they are packed into the same variable, where minOff occupies the lower 16 bit, and voices the uppe 16 bit.
            if(maxCoilCount.val>=1)
            {
                nCoil1On.val=coil1On.val
                nCoil1MinOff.val=coil1OffVoics.val&0x0000ffff
                nCoil1Voices.val=coil1OffVoics.val>>16
                nCoil1Voices.val=nCoil1Voices.val&0x0000ffff
                nCoil1Duty.val=coil1Duty.val
            }
            if(maxCoilCount.val>=2)
            {
                nCoil2On.val=coil2On.val
                nCoil2MinOff.val=coil2OffVoics.val&0x0000ffff
                nCoil2Voices.val=coil2OffVoics.val>>16
                nCoil2Voices.val=nCoil2Voices.val&0x0000ffff
                nCoil2Duty.val=coil2Duty.val
            }
            if(maxCoilCount.val>=3)
            {
                nCoil3On.val=coil3On.val
                nCoil3MinOff.val=coil3OffVoics.val&0x0000ffff
                nCoil3Voices.val=coil3OffVoics.val>>16
                nCoil3Voices.val=nCoil3Voices.val&0x0000ffff
                nCoil3Duty.val=coil3Duty.val
            }
            if(maxCoilCount.val>=4)
            {
                nCoil4On.val=coil4On.val
                nCoil4MinOff.val=coil4OffVoics.val&0x0000ffff
                nCoil4Voices.val=coil4OffVoics.val>>16
                nCoil4Voices.val=nCoil4Voices.val&0x0000ffff
                nCoil4Duty.val=coil4Duty.val
            }
            if(maxCoilCount.val>=5)
            {
                nCoil5On.val=coil5On.val
                nCoil5MinOff.val=coil5OffVoics.val&0x0000ffff
                nCoil5Voices.val=coil5OffVoics.val>>16
                nCoil5Voices.val=nCoil5Voices.val&0x0000ffff
                nCoil5Duty.val=coil5Duty.val
            }
            if(maxCoilCount.val>=6)
            {
                nCoil6On.val=coil6On.val
                nCoil6MinOff.val=coil6OffVoics.val&0x0000ffff
                nCoil6Voices.val=coil6OffVoics.val>>16
                nCoil6Voices.val=nCoil6Voices.val&0x0000ffff
                nCoil6Duty.val=coil6Duty.val
            }
            // Idle field is just used for default text/background color and as target for the numpad if no component is selected. Ergo should be hidden like functions.
            vis idle,0
            vis fCheck,0
            newValTargetId.val=idle.id
            //
            // Hide settings of coils that don't exist.
            if(maxCoilCount.val<6)
            {
                vis tCoil6,0
                vis nCoil6On,0
                vis nCoil6MinOff,0
                vis nCoil6Duty,0
                vis nCoil6Voices,0
            }
            if(maxCoilCount.val<5)
            {
                vis tCoil5,0
                vis nCoil5On,0
                vis nCoil5MinOff,0
                vis nCoil5Duty,0
                vis nCoil5Voices,0
            }
            if(maxCoilCount.val<4)
            {
                vis tCoil4,0
                vis nCoil4On,0
                vis nCoil4MinOff,0
                vis nCoil4Duty,0
                vis nCoil4Voices,0
            }
            if(maxCoilCount.val<3)
            {
                vis tCoil3,0
                vis nCoil3On,0
                vis nCoil3MinOff,0
                vis nCoil3Duty,0
                vis nCoil3Voices,0
            }
            if(maxCoilCount.val<2)
            {
                vis tCoil2,0
                vis nCoil2On,0
                vis nCoil2MinOff,0
                vis nCoil2Duty,0
                vis nCoil2Voices,0
            }
            if(maxCoilCount.val<1)
            {
                vis tCoil1,0
                vis nCoil1On,0
                vis nCoil1MinOff,0
                vis nCoil1Duty,0
                vis nCoil1Voices,0
                vis tMaxOn,0
                vis tMinOff,0
                vis tMaxDuty,0
                vis tSelToMod,0
                vis b0,0
                vis b1,0
                vis b2,0
                vis b3,0
                vis b4,0
                vis b5,0
                vis b6,0
                vis b7,0
                vis b8,0
                vis b9,0
                vis bClear,0
                vis bOK,0
            }
            //
            // Enable page refreshs again
            ref_star
        
        Postinitialize Event
            //
            // Draw gridlines
            click fDraw,1
        
        Touch Press Event
            if(Other_Settings.nBackOff.val!=0)
            {
                // Default "stop" action.
                // Set ontime and duty to 0 for all modes. See fSysex for details
                // Disable all modes as well.
                printh f0 00 26 06 01 7f 20 00 00 7f 00 00 00 00 00 f7
                printh f0 00 26 05 01 7f 21 00 00 7f 00 00 00 00 00 f7
                printh f0 00 26 05 01 7f 22 00 00 7f 00 00 00 00 00 f7
                // Set all ontime and duty settings of all pages to 0.
                // First come the global variables then the local variables.
                Simple.ontime.val=0
                Simple.duty.val=0
                Simple.set1.val=Simple.set1.val&0x0000ffff
                Simple.set2.val=Simple.set2.val&0x0000ffff
                Simple.set3.val=Simple.set3.val&0x0000ffff
                Simple.set4.val=Simple.set4.val&0x0000ffff
                Simple.set5.val=Simple.set5.val&0x0000ffff
                Simple.set6.val=Simple.set6.val&0x0000ffff
                MIDI_Live.ontime.val=0
                MIDI_Live.duty.val=0
                MIDI_Live.set1.val=0
                MIDI_Live.set2.val=0
                MIDI_Live.set3.val=0
                MIDI_Live.set4.val=0
                MIDI_Live.set5.val=0
                MIDI_Live.set6.val=0
                Lightsaber.ontime.val=0
                Lightsaber.ontimes12.val=0
                Lightsaber.ontimes34.val=0
                Lightsaber.ontimes56.val=0
            }
        
Variable (int32) currentHelp
    Attributes
        ID   : 3
        Scope: local
        Value: 4294967295
    
Variable (int32) coil1Chn
    Attributes
        ID   : 8
        Scope: global
        Value: 3208642559
    
Variable (int32) coil2Chn
    Attributes
        ID   : 9
        Scope: global
        Value: 3208642559
    
Variable (int32) coil3Chn
    Attributes
        ID   : 10
        Scope: global
        Value: 3208642559
    
Variable (int32) coil4Chn
    Attributes
        ID   : 11
        Scope: global
        Value: 3208642559
    
Variable (int32) coil5Chn
    Attributes
        ID   : 12
        Scope: global
        Value: 3208642559
    
Variable (int32) coil6Chn
    Attributes
        ID   : 13
        Scope: global
        Value: 3208642559
    
Variable (int32) activeCoils
    Attributes
        ID   : 14
        Scope: global
        Value: 63
    
Variable (int32) maxCoilCount
    Attributes
        ID   : 21
        Scope: global
        Value: 6
    
Variable (int32) newValTargetId
    Attributes
        ID   : 24
        Scope: local
        Value: 68
    
Variable (int32) newSelect
    Attributes
        ID   : 25
        Scope: local
        Value: 0
    
Variable (int32) coil1On
    Attributes
        ID   : 27
        Scope: global
        Value: 0
    
Variable (int32) coil1OffVoics
    Attributes
        ID   : 28
        Scope: global
        Value: 786432
    
Variable (int32) coil1Duty
    Attributes
        ID   : 29
        Scope: global
        Value: 0
    
Variable (int32) coil2On
    Attributes
        ID   : 30
        Scope: global
        Value: 0
    
Variable (int32) coil2OffVoics
    Attributes
        ID   : 31
        Scope: global
        Value: 786432
    
Variable (int32) coil2Duty
    Attributes
        ID   : 32
        Scope: global
        Value: 0
    
Variable (int32) coil3On
    Attributes
        ID   : 33
        Scope: global
        Value: 0
    
Variable (int32) coil3OffVoics
    Attributes
        ID   : 34
        Scope: global
        Value: 786432
    
Variable (int32) coil3Duty
    Attributes
        ID   : 35
        Scope: global
        Value: 0
    
Variable (int32) coil4On
    Attributes
        ID   : 36
        Scope: global
        Value: 0
    
Variable (int32) coil4OffVoics
    Attributes
        ID   : 37
        Scope: global
        Value: 786432
    
Variable (int32) coil4Duty
    Attributes
        ID   : 38
        Scope: global
        Value: 0
    
Variable (int32) coil5On
    Attributes
        ID   : 39
        Scope: global
        Value: 0
    
Variable (int32) coil5OffVoics
    Attributes
        ID   : 40
        Scope: global
        Value: 786432
    
Variable (int32) coil5Duty
    Attributes
        ID   : 41
        Scope: global
        Value: 0
    
Variable (int32) coil6On
    Attributes
        ID   : 42
        Scope: global
        Value: 0
    
Variable (int32) coil6OffVoics
    Attributes
        ID   : 43
        Scope: global
        Value: 786432
    
Variable (int32) coil6Duty
    Attributes
        ID   : 44
        Scope: global
        Value: 0
    
Variable (int32) maxVoices
    Attributes
        ID   : 46
        Scope: global
        Value: 16
    
Variable (int32) origin
    Attributes
        ID   : 64
        Scope: global
        Value: 4294967295
    
Number nCoil1On
    Attributes
        ID                 : 67
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Value              : 301
    
    Events
        Touch Press Event
            // Check if values are legal
            click fCheck,0
            // Reset push state of last selected value
            b[newValTargetId.val].bco=idle.bco
            b[newValTargetId.val].pco=idle.pco
            // Mark this field as pushed
            nCoil1On.bco=idle.pco
            nCoil1On.pco=idle.bco
            newValTargetId.val=nCoil1On.id
            // A new value has been selected
            newSelect.val=1
        
Number nCoil2On
    Attributes
        ID                 : 68
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Value              : 302
    
    Events
        Touch Press Event
            // Check if values are legal
            click fCheck,0
            // Reset push state of last selected value
            b[newValTargetId.val].bco=idle.bco
            b[newValTargetId.val].pco=idle.pco
            // Mark this field as pushed
            nCoil2On.bco=idle.pco
            nCoil2On.pco=idle.bco
            newValTargetId.val=nCoil2On.id
            // A new value has been selected
            newSelect.val=1
        
Number nCoil3On
    Attributes
        ID                 : 69
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Value              : 303
    
    Events
        Touch Press Event
            // Check if values are legal
            click fCheck,0
            // Reset push state of last selected value
            b[newValTargetId.val].bco=idle.bco
            b[newValTargetId.val].pco=idle.pco
            // Mark this field as pushed
            nCoil3On.bco=idle.pco
            nCoil3On.pco=idle.bco
            newValTargetId.val=nCoil3On.id
            // A new value has been selected
            newSelect.val=1
        
Number nCoil4On
    Attributes
        ID                 : 70
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Value              : 304
    
    Events
        Touch Press Event
            // Check if values are legal
            click fCheck,0
            // Reset push state of last selected value
            b[newValTargetId.val].bco=idle.bco
            b[newValTargetId.val].pco=idle.pco
            // Mark this field as pushed
            nCoil4On.bco=idle.pco
            nCoil4On.pco=idle.bco
            newValTargetId.val=nCoil4On.id
            // A new value has been selected
            newSelect.val=1
        
Number nCoil5On
    Attributes
        ID                 : 71
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Value              : 305
    
    Events
        Touch Press Event
            // Check if values are legal
            click fCheck,0
            // Reset push state of last selected value
            b[newValTargetId.val].bco=idle.bco
            b[newValTargetId.val].pco=idle.pco
            // Mark this field as pushed
            nCoil5On.bco=idle.pco
            nCoil5On.pco=idle.bco
            newValTargetId.val=nCoil5On.id
            // A new value has been selected
            newSelect.val=1
        
Number nCoil6On
    Attributes
        ID                 : 72
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Value              : 306
    
    Events
        Touch Press Event
            // Check if values are legal
            click fCheck,0
            // Reset push state of last selected value
            b[newValTargetId.val].bco=idle.bco
            b[newValTargetId.val].pco=idle.pco
            // Mark this field as pushed
            nCoil6On.bco=idle.pco
            nCoil6On.pco=idle.bco
            newValTargetId.val=nCoil6On.id
            // A new value has been selected
            newSelect.val=1
        
Number nCoil1MinOff
    Attributes
        ID                 : 74
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Value              : 101
    
    Events
        Touch Press Event
            // Check if values are legal
            click fCheck,0
            // Reset push state of last selected value
            b[newValTargetId.val].bco=idle.bco
            b[newValTargetId.val].pco=idle.pco
            // Mark this field as pushed
            nCoil1MinOff.bco=idle.pco
            nCoil1MinOff.pco=idle.bco
            newValTargetId.val=nCoil1MinOff.id
            // A new value has been selected
            newSelect.val=1
        
Number nCoil2MinOff
    Attributes
        ID                 : 75
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Value              : 102
    
    Events
        Touch Press Event
            // Check if values are legal
            click fCheck,0
            // Reset push state of last selected value
            b[newValTargetId.val].bco=idle.bco
            b[newValTargetId.val].pco=idle.pco
            // Mark this field as pushed
            nCoil2MinOff.bco=idle.pco
            nCoil2MinOff.pco=idle.bco
            newValTargetId.val=nCoil2MinOff.id
            // A new value has been selected
            newSelect.val=1
        
Number nCoil3MinOff
    Attributes
        ID                 : 76
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Value              : 103
    
    Events
        Touch Press Event
            // Check if values are legal
            click fCheck,0
            // Reset push state of last selected value
            b[newValTargetId.val].bco=idle.bco
            b[newValTargetId.val].pco=idle.pco
            // Mark this field as pushed
            nCoil3MinOff.bco=idle.pco
            nCoil3MinOff.pco=idle.bco
            newValTargetId.val=nCoil3MinOff.id
            // A new value has been selected
            newSelect.val=1
        
Number nCoil4MinOff
    Attributes
        ID                 : 77
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Value              : 104
    
    Events
        Touch Press Event
            // Check if values are legal
            click fCheck,0
            // Reset push state of last selected value
            b[newValTargetId.val].bco=idle.bco
            b[newValTargetId.val].pco=idle.pco
            // Mark this field as pushed
            nCoil4MinOff.bco=idle.pco
            nCoil4MinOff.pco=idle.bco
            newValTargetId.val=nCoil4MinOff.id
            // A new value has been selected
            newSelect.val=1
        
Number nCoil5MinOff
    Attributes
        ID                 : 78
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Value              : 105
    
    Events
        Touch Press Event
            // Check if values are legal
            click fCheck,0
            // Reset push state of last selected value
            b[newValTargetId.val].bco=idle.bco
            b[newValTargetId.val].pco=idle.pco
            // Mark this field as pushed
            nCoil5MinOff.bco=idle.pco
            nCoil5MinOff.pco=idle.bco
            newValTargetId.val=nCoil5MinOff.id
            // A new value has been selected
            newSelect.val=1
        
Number nCoil6MinOff
    Attributes
        ID                 : 79
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Value              : 106
    
    Events
        Touch Press Event
            // Check if values are legal
            click fCheck,0
            // Reset push state of last selected value
            b[newValTargetId.val].bco=idle.bco
            b[newValTargetId.val].pco=idle.pco
            // Mark this field as pushed
            nCoil6MinOff.bco=idle.pco
            nCoil6MinOff.pco=idle.bco
            newValTargetId.val=nCoil6MinOff.id
            // A new value has been selected
            newSelect.val=1
        
Number nCoil1Voices
    Attributes
        ID                 : 88
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Value              : 1
    
    Events
        Touch Press Event
            // Check if values are legal
            click fCheck,0
            // Reset push state of last selected value
            b[newValTargetId.val].bco=idle.bco
            b[newValTargetId.val].pco=idle.pco
            // Mark this field as pushed
            nCoil1Voices.bco=idle.pco
            nCoil1Voices.pco=idle.bco
            newValTargetId.val=nCoil1Voices.id
            // A new value has been selected
            newSelect.val=1
        
Number nCoil2Voices
    Attributes
        ID                 : 89
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Value              : 2
    
    Events
        Touch Press Event
            // Check if values are legal
            click fCheck,0
            // Reset push state of last selected value
            b[newValTargetId.val].bco=idle.bco
            b[newValTargetId.val].pco=idle.pco
            // Mark this field as pushed
            nCoil2Voices.bco=idle.pco
            nCoil2Voices.pco=idle.bco
            newValTargetId.val=nCoil2Voices.id
            // A new value has been selected
            newSelect.val=1
        
Number nCoil3Voices
    Attributes
        ID                 : 90
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Value              : 3
    
    Events
        Touch Press Event
            // Check if values are legal
            click fCheck,0
            // Reset push state of last selected value
            b[newValTargetId.val].bco=idle.bco
            b[newValTargetId.val].pco=idle.pco
            // Mark this field as pushed
            nCoil3Voices.bco=idle.pco
            nCoil3Voices.pco=idle.bco
            newValTargetId.val=nCoil3Voices.id
            // A new value has been selected
            newSelect.val=1
        
Number nCoil4Voices
    Attributes
        ID                 : 91
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Value              : 4
    
    Events
        Touch Press Event
            // Check if values are legal
            click fCheck,0
            // Reset push state of last selected value
            b[newValTargetId.val].bco=idle.bco
            b[newValTargetId.val].pco=idle.pco
            // Mark this field as pushed
            nCoil4Voices.bco=idle.pco
            nCoil4Voices.pco=idle.bco
            newValTargetId.val=nCoil4Voices.id
            // A new value has been selected
            newSelect.val=1
        
Number nCoil5Voices
    Attributes
        ID                 : 92
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Value              : 5
    
    Events
        Touch Press Event
            // Check if values are legal
            click fCheck,0
            // Reset push state of last selected value
            b[newValTargetId.val].bco=idle.bco
            b[newValTargetId.val].pco=idle.pco
            // Mark this field as pushed
            nCoil5Voices.bco=idle.pco
            nCoil5Voices.pco=idle.bco
            newValTargetId.val=nCoil5Voices.id
            // A new value has been selected
            newSelect.val=1
        
Number nCoil6Voices
    Attributes
        ID                 : 93
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Value              : 6
    
    Events
        Touch Press Event
            // Check if values are legal
            click fCheck,0
            // Reset push state of last selected value
            b[newValTargetId.val].bco=idle.bco
            b[newValTargetId.val].pco=idle.pco
            // Mark this field as pushed
            nCoil6Voices.bco=idle.pco
            nCoil6Voices.pco=idle.bco
            newValTargetId.val=nCoil6Voices.id
            // A new value has been selected
            newSelect.val=1
        
XFloat idle
    Attributes
        ID                 : 23
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Value              : 0
    
XFloat nCoil1Duty
    Attributes
        ID                 : 81
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Value              : 101
    
    Events
        Touch Press Event
            // Check if values are legal
            click fCheck,0
            // Reset push state of last selected value
            b[newValTargetId.val].bco=idle.bco
            b[newValTargetId.val].pco=idle.pco
            // Mark this field as pushed
            nCoil1Duty.bco=idle.pco
            nCoil1Duty.pco=idle.bco
            newValTargetId.val=nCoil1Duty.id
            // A new value has been selected
            newSelect.val=1
        
XFloat nCoil2Duty
    Attributes
        ID                 : 82
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Value              : 102
    
    Events
        Touch Press Event
            // Check if values are legal
            click fCheck,0
            // Reset push state of last selected value
            b[newValTargetId.val].bco=idle.bco
            b[newValTargetId.val].pco=idle.pco
            // Mark this field as pushed
            nCoil2Duty.bco=idle.pco
            nCoil2Duty.pco=idle.bco
            newValTargetId.val=nCoil2Duty.id
            // A new value has been selected
            newSelect.val=1
        
XFloat nCoil3Duty
    Attributes
        ID                 : 83
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Value              : 103
    
    Events
        Touch Press Event
            // Check if values are legal
            click fCheck,0
            // Reset push state of last selected value
            b[newValTargetId.val].bco=idle.bco
            b[newValTargetId.val].pco=idle.pco
            // Mark this field as pushed
            nCoil3Duty.bco=idle.pco
            nCoil3Duty.pco=idle.bco
            newValTargetId.val=nCoil3Duty.id
            // A new value has been selected
            newSelect.val=1
        
XFloat nCoil4Duty
    Attributes
        ID                 : 84
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Value              : 104
    
    Events
        Touch Press Event
            // Check if values are legal
            click fCheck,0
            // Reset push state of last selected value
            b[newValTargetId.val].bco=idle.bco
            b[newValTargetId.val].pco=idle.pco
            // Mark this field as pushed
            nCoil4Duty.bco=idle.pco
            nCoil4Duty.pco=idle.bco
            newValTargetId.val=nCoil4Duty.id
            // A new value has been selected
            newSelect.val=1
        
XFloat nCoil5Duty
    Attributes
        ID                 : 85
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Value              : 105
    
    Events
        Touch Press Event
            // Check if values are legal
            click fCheck,0
            // Reset push state of last selected value
            b[newValTargetId.val].bco=idle.bco
            b[newValTargetId.val].pco=idle.pco
            // Mark this field as pushed
            nCoil5Duty.bco=idle.pco
            nCoil5Duty.pco=idle.bco
            newValTargetId.val=nCoil5Duty.id
            // A new value has been selected
            newSelect.val=1
        
XFloat nCoil6Duty
    Attributes
        ID                 : 86
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Value              : 106
    
    Events
        Touch Press Event
            // Check if values are legal
            click fCheck,0
            // Reset push state of last selected value
            b[newValTargetId.val].bco=idle.bco
            b[newValTargetId.val].pco=idle.pco
            // Mark this field as pushed
            nCoil6Duty.bco=idle.pco
            nCoil6Duty.pco=idle.bco
            newValTargetId.val=nCoil6Duty.id
            // A new value has been selected
            newSelect.val=1
        
Text tHelp
    Attributes
        ID                 : 1
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Text               : 
        Max. Text Size     : 900
    
    Events
        Touch Press Event
            // This object is only visible in help mode. No need to be "transparent" to clicks in normal operation.
            click bReturn,0
        
Text tHideBack
    Attributes
        ID                 : 4
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Text               :  
        Max. Text Size     : 1
    
    Events
        Touch Press Event
            // This is just to hide the background around the sliders so that you do not turn the outputs off by accident.
        
Text tHideBack2
    Attributes
        ID                 : 5
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Text               :  
        Max. Text Size     : 1
    
    Events
        Touch Press Event
            // This is just to hide the background around the sliders so that you do not turn the outputs off by accident.
        
Text tTitle
    Attributes
        ID                 : 6
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Text               : Limits of all Tesla Coils
        Max. Text Size     : 30
    
    Events
        Touch Press Event
            // Make this object "transparent" for clicks and click background.
            click 0,1
        
Text tCoil1
    Attributes
        ID                 : 15
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Text               : Tesla Coil 1:
        Max. Text Size     : 30
    
    Events
        Touch Press Event
            // Make this object "transparent" for clicks and click background.
            click 0,1
        
Text tCoil2
    Attributes
        ID                 : 16
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Text               : Tesla Coil 2:
        Max. Text Size     : 30
    
    Events
        Touch Press Event
            // Make this object "transparent" for clicks and click background.
            click 0,1
        
Text tCoil3
    Attributes
        ID                 : 17
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Text               : Tesla Coil 3:
        Max. Text Size     : 30
    
    Events
        Touch Press Event
            // Make this object "transparent" for clicks and click background.
            click 0,1
        
Text tCoil4
    Attributes
        ID                 : 18
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Text               : Tesla Coil 4:
        Max. Text Size     : 30
    
    Events
        Touch Press Event
            // Make this object "transparent" for clicks and click background.
            click 0,1
        
Text tCoil5
    Attributes
        ID                 : 19
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Text               : Tesla Coil 5:
        Max. Text Size     : 30
    
    Events
        Touch Press Event
            // Make this object "transparent" for clicks and click background.
            click 0,1
        
Text tCoil6
    Attributes
        ID                 : 20
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Text               : Tesla Coil 6:
        Max. Text Size     : 30
    
    Events
        Touch Press Event
            // Make this object "transparent" for clicks and click background.
            click 0,1
        
Text tSelToMod
    Attributes
        ID                 : 26
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Text               : Select any value to modify.
        Max. Text Size     : 30
    
    Events
        Touch Press Event
            // Make this object "transparent" for clicks and click background.
            click 0,1
        
Text fCheck
    Attributes
        ID                 : 45
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Text               :  
        Max. Text Size     : 10
    
    Events
        Touch Release Event
            // Settings must stay in certain ranges. this function checks and fixes them.
            if(newValTargetId.val<=nCoil6MinOff.id)
            {
                if(b[newValTargetId.val].val>65535)
                {
                    b[newValTargetId.val].val=65535
                }
            }else if(newValTargetId.val<=nCoil6Duty.id)
            {
                if(b[newValTargetId.val].val>1000)
                {
                    b[newValTargetId.val].val=1000
                }
            }else if(newValTargetId.val<=nCoil6Voices.id)
            {
                if(b[newValTargetId.val].val>16)
                {
                    b[newValTargetId.val].val=16
                }else if(b[newValTargetId.val].val<=0)
                {
                    b[newValTargetId.val].val=1
                }
            }
            click fSysex,1
        
Text tUser
    Attributes
        ID                 : 47
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Text               :  Guest
        Max. Text Size     : 32
    
    Events
        Touch Press Event
            // Make this object "transparent" for clicks and click background.
            click 0,1
        
Text tMSI
    Attributes
        ID                 : 48
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Text               : Simple
        Max. Text Size     : 16
    
    Events
        Touch Press Event
            // Make this object "transparent" for clicks and click background.
            click 0,1
        
Text tMML
    Attributes
        ID                 : 49
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Text               : MIDI Live
        Max. Text Size     : 16
    
    Events
        Touch Press Event
            // Make this object "transparent" for clicks and click background.
            click 0,1
        
Text tMLS
    Attributes
        ID                 : 50
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Text               : Lightsaber
        Max. Text Size     : 16
    
    Events
        Touch Press Event
            // Make this object "transparent" for clicks and click background.
            click 0,1
        
Text tMaxOn
    Attributes
        ID                 : 66
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Text               : max. Ontime [µs]
        Max. Text Size     : 16
    
    Events
        Touch Press Event
            // Make this object "transparent" for clicks and click background.
            click 0,1
        
Text tMinOff
    Attributes
        ID                 : 73
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Text               : min. Offtime [µs]
        Max. Text Size     : 17
    
    Events
        Touch Press Event
            // Make this object "transparent" for clicks and click background.
            click 0,1
        
Text tMaxDuty
    Attributes
        ID                 : 80
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Text               : max. Duty [%]
        Max. Text Size     : 16
    
    Events
        Touch Press Event
            // Make this object "transparent" for clicks and click background.
            click 0,1
        
Text tMaxVoices
    Attributes
        ID                 : 87
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Text               : max. MIDI Voices
        Max. Text Size     : 16
    
    Events
        Touch Press Event
            // Make this object "transparent" for clicks and click background.
            click 0,1
        
Text tu
    Attributes
        ID                 : 95
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Text               : µ
        Max. Text Size     : 3
    
    Events
        Touch Press Event
            // This is hidden anyway. It's a dirty hack for not having to recreate the font for UTF8 (its 8859-1).
            // That, combined with the fact that \xABCD doesn't work in Nextion requires this to be able to get
            // that character.
        
Button bReturn
    Attributes
        ID               : 7
        Scope            : local
        Send Component ID: disabled
        State            : unpressed
        Text             : â†
        Max. Text Size   : 3
    
    Events
        Touch Press Event
            click bOK,0
            // Store local component values in global variables. Note: Since a component consists of many different properties (like font size, color, position, ...) its memory footprint is much larger and it should not be global.
            // Since min offtime and max MIDI voices are not used elsewhere in the GUI they are packed into the same variable, where minOff occupies the lower 16 bit, and voices the uppe 16 bit.
            // Set user 2 limits to max Coil limits.
            //   sys0 = max ontime of all coils
            //   sys1 = max duty of all coils
            sys0=0
            sys1=0
            if(maxCoilCount.val>=1)
            {
                coil1On.val=nCoil1On.val
                coil1OffVoics.val=nCoil1Voices.val<<16
                coil1OffVoics.val+=nCoil1MinOff.val
                coil1Duty.val=nCoil1Duty.val
                if(coil1On.val>sys0)
                {
                    sys0=coil1On.val
                }
                if(coil1Duty.val>sys1)
                {
                    sys1=coil1Duty.val
                }
            }
            if(maxCoilCount.val>=2)
            {
                coil2On.val=nCoil2On.val
                coil2OffVoics.val=nCoil2Voices.val<<16
                coil2OffVoics.val+=nCoil2MinOff.val
                coil2Duty.val=nCoil2Duty.val
                if(coil2On.val>sys0)
                {
                    sys0=coil2On.val
                }
                if(coil2Duty.val>sys1)
                {
                    sys1=coil2Duty.val
                }
            }
            if(maxCoilCount.val>=3)
            {
                coil3On.val=nCoil3On.val
                coil3OffVoics.val=nCoil3Voices.val<<16
                coil3OffVoics.val+=nCoil3MinOff.val
                coil3Duty.val=nCoil3Duty.val
                if(coil3On.val>sys0)
                {
                    sys0=coil3On.val
                }
                if(coil3Duty.val>sys1)
                {
                    sys1=coil3Duty.val
                }
            }
            if(maxCoilCount.val>=4)
            {
                coil4On.val=nCoil4On.val
                coil4OffVoics.val=nCoil4Voices.val<<16
                coil4OffVoics.val+=nCoil4MinOff.val
                coil4Duty.val=nCoil4Duty.val
                if(coil4On.val>sys0)
                {
                    sys0=coil4On.val
                }
                if(coil4Duty.val>sys1)
                {
                    sys1=coil4Duty.val
                }
            }
            if(maxCoilCount.val>=5)
            {
                coil5On.val=nCoil5On.val
                coil5OffVoics.val=nCoil5Voices.val<<16
                coil5OffVoics.val+=nCoil5MinOff.val
                coil5Duty.val=nCoil5Duty.val
                if(coil5On.val>sys0)
                {
                    sys0=coil5On.val
                }
                if(coil5Duty.val>sys1)
                {
                    sys1=coil5Duty.val
                }
            }
            if(maxCoilCount.val>=6)
            {
                coil6On.val=nCoil6On.val
                coil6OffVoics.val=nCoil6Voices.val<<16
                coil6OffVoics.val+=nCoil6MinOff.val
                coil6Duty.val=nCoil6Duty.val
                if(coil6On.val>sys0)
                {
                    sys0=coil6On.val
                }
                if(coil6Duty.val>sys1)
                {
                    sys1=coil6Duty.val
                }
            }
            User_Settings.u2Ontime.val=sys0
            User_Settings.u2Duty.val=sys1
        
        Touch Release Event
            page origin.val
        
Button bOK
    Attributes
        ID               : 22
        Scope            : local
        Send Component ID: disabled
        State            : unpressed
        Text             : ok
        Max. Text Size   : 2
    
    Events
        Touch Release Event
            click fCheck,0
            // fSysex requires a correct targetId.
            b[newValTargetId.val].bco=idle.bco
            b[newValTargetId.val].pco=idle.pco
            newValTargetId.val=idle.id
        
Button b1
    Attributes
        ID               : 51
        Scope            : local
        Send Component ID: disabled
        State            : unpressed
        Text             : 1
        Max. Text Size   : 1
    
    Events
        Touch Release Event
            if(newSelect.val!=0)
            {
                newSelect.val=0
                b[newValTargetId.val].val=0
            }else
            {
                b[newValTargetId.val].val*=10
            }
            b[newValTargetId.val].val+=1
        
Button b2
    Attributes
        ID               : 52
        Scope            : local
        Send Component ID: disabled
        State            : unpressed
        Text             : 2
        Max. Text Size   : 1
    
    Events
        Touch Release Event
            if(newSelect.val!=0)
            {
                newSelect.val=0
                b[newValTargetId.val].val=0
            }else
            {
                b[newValTargetId.val].val*=10
            }
            b[newValTargetId.val].val+=2
        
Button b3
    Attributes
        ID               : 53
        Scope            : local
        Send Component ID: disabled
        State            : unpressed
        Text             : 3
        Max. Text Size   : 1
    
    Events
        Touch Release Event
            if(newSelect.val!=0)
            {
                newSelect.val=0
                b[newValTargetId.val].val=0
            }else
            {
                b[newValTargetId.val].val*=10
            }
            b[newValTargetId.val].val+=3
        
Button b4
    Attributes
        ID               : 54
        Scope            : local
        Send Component ID: disabled
        State            : unpressed
        Text             : 4
        Max. Text Size   : 1
    
    Events
        Touch Release Event
            if(newSelect.val!=0)
            {
                newSelect.val=0
                b[newValTargetId.val].val=0
            }else
            {
                b[newValTargetId.val].val*=10
            }
            b[newValTargetId.val].val+=4
        
Button b5
    Attributes
        ID               : 55
        Scope            : local
        Send Component ID: disabled
        State            : unpressed
        Text             : 5
        Max. Text Size   : 1
    
    Events
        Touch Release Event
            if(newSelect.val!=0)
            {
                newSelect.val=0
                b[newValTargetId.val].val=0
            }else
            {
                b[newValTargetId.val].val*=10
            }
            b[newValTargetId.val].val+=5
        
Button b6
    Attributes
        ID               : 56
        Scope            : local
        Send Component ID: disabled
        State            : unpressed
        Text             : 6
        Max. Text Size   : 1
    
    Events
        Touch Release Event
            if(newSelect.val!=0)
            {
                newSelect.val=0
                b[newValTargetId.val].val=0
            }else
            {
                b[newValTargetId.val].val*=10
            }
            b[newValTargetId.val].val+=6
        
Button bClear
    Attributes
        ID               : 57
        Scope            : local
        Send Component ID: disabled
        State            : unpressed
        Text             : X
        Max. Text Size   : 1
    
    Events
        Touch Release Event
            b[newValTargetId.val].val=0
            click fCheck,0
        
Button b0
    Attributes
        ID               : 58
        Scope            : local
        Send Component ID: disabled
        State            : unpressed
        Text             : 0
        Max. Text Size   : 1
    
    Events
        Touch Release Event
            if(newSelect.val!=0)
            {
                newSelect.val=0
                b[newValTargetId.val].val=0
            }else
            {
                b[newValTargetId.val].val*=10
            }
        
Button b9
    Attributes
        ID               : 59
        Scope            : local
        Send Component ID: disabled
        State            : unpressed
        Text             : 9
        Max. Text Size   : 1
    
    Events
        Touch Release Event
            if(newSelect.val!=0)
            {
                newSelect.val=0
                b[newValTargetId.val].val=0
            }else
            {
                b[newValTargetId.val].val*=10
            }
            b[newValTargetId.val].val+=9
        
Button b8
    Attributes
        ID               : 60
        Scope            : local
        Send Component ID: disabled
        State            : unpressed
        Text             : 8
        Max. Text Size   : 1
    
    Events
        Touch Release Event
            if(newSelect.val!=0)
            {
                newSelect.val=0
                b[newValTargetId.val].val=0
            }else
            {
                b[newValTargetId.val].val*=10
            }
            b[newValTargetId.val].val+=8
        
Button b7
    Attributes
        ID               : 61
        Scope            : local
        Send Component ID: disabled
        State            : unpressed
        Text             : 7
        Max. Text Size   : 1
    
    Events
        Touch Release Event
            if(newSelect.val!=0)
            {
                newSelect.val=0
                b[newValTargetId.val].val=0
            }else
            {
                b[newValTargetId.val].val*=10
            }
            b[newValTargetId.val].val+=7
        
Dual-state Button btHelp
    Attributes
        ID               : 2
        Scope            : local
        Send Component ID: disabled
        State            : unpressed
        Text             : ?
        Max. Text Size   : 1
    
    Events
        Touch Release Event
            if(btHelp.val==0)
            {
                // In case something was displayed, get rid of it
                bReturn.val=1
                click hHelp,0
                // disable help overlay
                vis hHelp,0
            }else
            {
                vis hHelp,1
            }
            // Restore drawings
            click fDraw,1
        
Hotspot fLoadModes
    Attributes
        ID               : 62
        Scope            : local
        Send Component ID: disabled
    
    Events
        Touch Press Event
            // Load active modes
            sys0=Settings.activeModes.val&4
            if(sys0!=0)
            {
                // Lightsaber Mode is active
                tMLS.bco=Settings.backSelectCol2.val
            }
            //
            // Display all active modes
            sys0=Settings.activeModes.val&1
            if(sys0!=0)
            {
                // Simple Mode is active
                tMSI.bco=Settings.backSelectCol2.val
            }
            sys0=Settings.activeModes.val&2
            if(sys0!=0)
            {
                // MIDI Live Mode is active
                tMML.bco=Settings.backSelectCol2.val
            }
        
Hotspot fSysex
    Attributes
        ID               : 63
        Scope            : local
        Send Component ID: disabled
    
    Events
        Touch Press Event
            // Sends a Syntherrupter Sysex command that updates Syntherrupter with whatever
            // has been changed on this page.
            // Package format:
            // F0 00 DMID DMID VERSION DEVICE PN_LSB PN_MSB TG_LSB TG_MSB VAL_LSB VAL VAL VAL VAL_MSB F7
            // DMID DMID = 26 05
            // VERSION = 01
            // DEVICE = 7f (wildcard)
            // PN, TG, VAL: see syntherrupter sysex documentation
            //
            // To send:
            //
            if(newValTargetId.val>=nCoil1On.id&&newValTargetId.val<=nCoil6Voices.id)
            {
                //
                // Integer settings
                // SYSEX_START DMID VERSION DEVICE
                printh f0 00 26 05 01 7f
                // PN_LSB PN_MSB
                if(newValTargetId.val<=nCoil6On.id)
                {
                    printh 60 02 // Coil Max Ontime
                    sys0=newValTargetId.val-nCoil1On.id
                }else if(newValTargetId.val<=nCoil6MinOff.id)
                {
                    printh 62 02 // Coil Min Offtime
                    sys0=newValTargetId.val-nCoil1MinOff.id
                }else if(newValTargetId.val<=nCoil6Duty.id)
                {
                    printh 63 02 // Coil Max Duty
                    sys0=newValTargetId.val-nCoil1Duty.id
                }else
                {
                    printh 64 02 // Coil Max MIDI Voices
                    sys0=newValTargetId.val-nCoil1Voices.id
                }
                // TG_LSB
                prints sys0,1 // Coil number
                // TG_MSB
                prints 0,1 // reserved
                // VAL (4 bytes to be packed into 5 groups of 7 bit)
                // Integer; meaning depends on selection
                sys1=b[newValTargetId.val].val
                sys2=sys1
                sys2&=0x7f
                prints sys2,1
                sys1>>=7
                sys2=sys1&0x7f
                prints sys2,1
                sys1>>=7
                sys2=sys1&0x7f
                prints sys2,1
                sys1>>=7
                sys2=sys1&0x7f
                prints sys2,1
                sys1>>=7
                sys2=sys1&0x7f
                prints sys2,1
                // SYSEX_END
                printh f7
            }
        
Hotspot fDraw
    Attributes
        ID               : 65
        Scope            : local
        Send Component ID: disabled
    
    Events
        Touch Press Event
            if(maxCoilCount.val>0)
            {
                // Table grid
                // Determine Table height (a.k.a up to where the lines shall be drawn
                sys2=maxCoilCount.val
                sys2*=31
                sys2+=120
                // Vertical grid lines
                line 130,100,130,sys2,idle.pco
                line 290,100,290,sys2,idle.pco
                line 445,100,445,sys2,idle.pco
                line 585,100,585,sys2,idle.pco
                // Horizontal grid lines
                sys1=126
                for(sys0=0;sys0<6;sys0++)
                {
                    if(sys1<sys2)
                    {
                        line 10,sys1,730,sys1,tCoil1.pco
                    }
                    sys1+=31
                }
            }
        
Hotspot fLoadColors
    Attributes
        ID               : 94
        Scope            : local
        Send Component ID: disabled
    
    Events
        Touch Press Event
            // Changes all page components according to the current color set.
            // Note: This component has to be the last component of the page.
            //
            // sys0: component id
            // sys1: component type
            // sys2: picture id offset for current color mode
            sys2=Settings.colorMode.val*Settings.picCount.val
            for(sys0=0;sys0<fLoadColors.id;sys0++)
            {
                // More convenient for typing
                sys1=b[sys0].type
                if(sys1==121)
                {
                    // Types that have bco
                    // page
                    if(b[sys0].bco==Settings.backCol2Deflt.val)
                    {
                        b[sys0].bco=Settings.backCol2.val
                    }else
                    {
                        b[sys0].bco=Settings.backCol.val
                    }
                }else if(sys1==54||sys1==59||sys1==116||sys1==55)
                {
                    // Types that have bco, pco, and sta:
                    // number, float, text, scroll text
                    if(b[sys0].sta==1)
                    {
                        if(b[sys0].bco==Settings.backCol2Deflt.val)
                        {
                            b[sys0].bco=Settings.backCol2.val
                            b[sys0].pco=Settings.frontCol2.val
                        }else
                        {
                            b[sys0].bco=Settings.backCol.val
                            b[sys0].pco=Settings.frontCol.val
                        }
                    }
                }else if(sys1==98||sys1==53)
                {
                    // Types that have pco, pic, pco2, pic2, sta:
                    // button, dual-state button
                    if(b[sys0].sta==2)
                    {
                        b[sys0].pco=Settings.frontCol.val
                        b[sys0].pco2=Settings.backCol.val
                        b[sys0].pic=b[sys0].pic%Settings.picCount.val
                        b[sys0].pic+=sys2
                        b[sys0].pic2=b[sys0].pic+1
                    }
                }else if(sys1==58)
                {
                    // Types that have bco, pco
                    // QR Code
                    b[sys0].bco=Settings.backCol.val
                    b[sys0].pco=Settings.qrFrontCol.val
                }else if(sys1==1)
                {
                    // Types that have pic, pic1, pic2:
                    // slider
                    b[sys0].pic=b[sys0].pic%Settings.picCount.val
                    b[sys0].pic+=sys2
                    b[sys0].pic1=b[sys0].pic
                    b[sys0].pic2=b[sys0].pic2%Settings.picCount.val
                    b[sys0].pic2+=sys2
                }
            }
        
Hotspot hHelp
    Attributes
        ID               : 96
        Scope            : local
        Send Component ID: disabled
    
    Events
        Touch Press Event
            // Determine component/feature that would have been touched.
            sys1=0
            for(sys0=fLoadColors.id;sys0>=0;sys0--)
            {
                // Ignore hotspots, touchcaps, variables
                if(b[sys0].type!=5&&b[sys0].type!=51&&b[sys0].type!=52&&b[sys0].type!=109)
                {
                    x0=b[sys0].x
                    y0=b[sys0].y
                    x1=b[sys0].w
                    y1=b[sys0].h
                    x1+=x0
                    y1+=y0
                    if(tch0>=x0&&tch0<x1&&tch1>=y0&&tch1<y1)
                    {
                        sys1=sys0
                        // abort loop
                        sys0=-1
                    }
                }
            }
            if(currentHelp.val>=0&&sys1==bReturn.id)
            {
                // Return button has been pressed while help is being displayed. This means
                // hide the help text again (see touch release event)
                bReturn.val=1
            }else if(sys1==btHelp.id)
            {
                // Question mark button has been pressed. Disable help mode (see touch release event).
                btHelp.val=0
            }else if(currentHelp.val>=0)
            {
                // Help is being displayed and something else has been pressed.
                // Act as if the page background had been pressed.
                // Note: this can make other UI elements to "pop up", therefore bring the text back on top
                // TODO: Prevent flickering!
                click 0,1
                doevents
                ref tHelp
            }else
            {
                // Show help according to what has been touched.
                // Assume that some new help will be displayed
                sys0=1
                tHelp.txt=""
                if(Settings.firstHelp.val!=0)
                {
                    Settings.firstHelp.val=0
                    tHelp.txt+="Help Mode Enabled \r\r"
                    tHelp.txt+="You've enabled the on-screen help by pressing the question mark at the top right \r"
                    tHelp.txt+="corner. As long as it's active, you can press any part of the UI and get a description \r"
                    tHelp.txt+="of what that button/slider/... does. \r"
                    tHelp.txt+="Press the X button at the top left to get help on another part of the UI. \r"
                    tHelp.txt+="Press the question mark at the top right to leave help mode and resume normal\r"
                    tHelp.txt+="operation. \r"
                    tHelp.txt+="Press any other part of the screen, including this description, to disable all outputs. \r"
                    tHelp.txt+="For more information, check the help on the page background.\r"
                    tHelp.txt+=" \r"
                    tHelp.txt+="This tip won't reappear until you reset or power cycle Syntherrupter. \r"
                }else if(sys1==tTitle.id)
                {
                    tHelp.txt+="Coil Limits\r\r"
                    tHelp.txt+="'Absolute Maximum Ratings' of your tesla coil(s) \r"
                    tHelp.txt+="Whether you're using Simple Modoe, MIDI Live Mode or Lightsaber Mode. Any signals\r"
                    tHelp.txt+="that these modes generate, is checked against these limits, ensuring that no matter\r"
                    tHelp.txt+="what you do, no matter which MIDI file you play, the interrupter signal stays within these\r"
                    tHelp.txt+="(hopefully safe) limits.\r"
                }else if(sys1==tUser.id)
                {
                    tHelp.txt+="Current User \r\r"
                    tHelp.txt+="The name of the currently active user. This determines the range within which you \r"
                    tHelp.txt+="can operate Syntherrupter. Go to the main menu to change the current user. \r"
                }else if(sys1==tMSI.id||sys1==tMML.id||sys1==tMLS.id)
                {
                    tHelp.txt+="Active Modes \r\r"
                    tHelp.txt+="Modes can stay active even if you leave the corresponding page. Active modes are \r"
                    tHelp.txt+="highlighted at the bottom right.  \r"
                }else if(sys1==0||sys1==tHelp.id)
                {
                    tHelp.txt+="Page background \r\r"
                    tHelp.txt+="The page background, textboxes and non-interactive elements in general shut down \r"
                    tHelp.txt+="all outputs if you press them. This allows you to quickly stop all outputs and all \r"
                    tHelp.txt+="modes if something goes wrong. \r"
                    tHelp.txt+="Note however, that unplugging is the only actually safe way to ensure a complete \r"
                    tHelp.txt+="shutdown! \r"
                    tHelp.txt+="This feature can be temporarily disabled in the general settings. After a reset or \r"
                    tHelp.txt+="power-cycle it will be enabled again.\r"
                }else if(sys1==bReturn.id)
                {
                    tHelp.txt+="Return Button\r\r"
                    tHelp.txt+="Return to the previous page\r"
                    tHelp.txt+="\r"
                    tHelp.txt+="If you want to leave help mode, press the question mark at the top left. \r"
                }else if(sys1>=tMaxOn.id&&sys1<=nCoil6On.id)
                {
                    tHelp.txt+="Maximum Ontime\r\r"
                    tHelp.txt+="Limit the pulse width of the interrupter signal. Syntherrupter won't generate any ontime \r"
                    tHelp.txt+="longer than the value specified here.\r"
                    tHelp.txt+="This is useful to prevent the OCD (over current detection) from tripping. If using freewheeling,\r"
                    tHelp.txt+="a limited pulse width limits the peak heat generated in the IGBTs and especially their diodes.\r"
                    tHelp.txt+="\r"
                    tHelp.txt+="Value range: 1"+tu.txt+"s - 65ms\r"
                }else if(sys1>=tMinOff.id&&sys1<=nCoil6MinOff.id)
                {
                    tHelp.txt+="Minimum Offtime\r\r"
                    tHelp.txt+="Any two ontimes are separated by at least this amount of time. \r"
                    tHelp.txt+="All common DRSSTC drivers hardswitch the IGBTs at least once at the beginning of an \r"
                    tHelp.txt+="ontime to get some current flowing and thus a valid feedback signal. This works great if \r"
                    tHelp.txt+="there's actually 0 primary current. If however two ontimes occur back to back, then the \r"
                    tHelp.txt+="primary current had no time to ring down, thus you have a high risk of hard-switching at \r"
                    tHelp.txt+="least once. \r"
                    tHelp.txt+="The minimum offtimes purpose is to ensure the primary current reached (near) 0. \r"
                    tHelp.txt+="Note that you should make it as big as necessary, while keeping it as small as possible;\r"
                    tHelp.txt+="it has a big impact on audio quality. A rule of thumb would be half the time it takes to trigger\r"
                    tHelp.txt+="your OCD. If an ontime of 60Âµs is enough to hit the OCD, 30Âµs might be a good starting point.\r"
                    tHelp.txt+="\r"
                    tHelp.txt+="Value range: 1"+tu.txt+"s - 65ms\r"
                }else if(sys1>=tMaxDuty.id&&sys1<=nCoil6Duty.id)
                {
                    tHelp.txt+="Maximum Duty Cycle\r\r"
                    tHelp.txt+="Limit the signal duty cycle. This limits the average (!) heating of your components\r"
                    tHelp.txt+="Syntherrupters duty limiter sums up all tones that are playing on a given output. If this\r"
                    tHelp.txt+="sum exceeds the limit, all tones are reduced in volume. It is not using any sort of \r"
                    tHelp.txt+="moving average calculation. This means that for very brief time periods, the effective \r"
                    tHelp.txt+="duty cycle can be higher (f.ex. if 2, 3 ontimes are closer together). However, if at any\r"
                    tHelp.txt+="time you would hit pause in your MIDI file, keeping whichever mix of tones is playing,\r"
                    tHelp.txt+="your average duty wouldn't exceed this value. \r"
                    tHelp.txt+="Note: the duty cycle limit takes all modes into account, not only MIDI Live mode. \r"
                    tHelp.txt+="Common values range from 10% to 25%. \r"
                    tHelp.txt+="\r"
                    tHelp.txt+="Value range: 0.0% - 100.0%\r"
                }else if(sys1>=tMaxVoices.id&&sys1<=nCoil6Voices.id)
                {
                    tHelp.txt+="Maximum Number of MIDI Voices\r\r"
                    tHelp.txt+="Limit how many notes from your MIDI file can play at the same time. \r"
                    tHelp.txt+="MIDI files can be quite rich, with lots of instruments playing together. However, with \r"
                    tHelp.txt+="a duty cycle limit of f.ex. 10% and 10 simultaneous notes, that means that each note\r"
                    tHelp.txt+="only plays at 1% duty cycle. All notes share this duty cycle and thus volume budget. \r"
                    tHelp.txt+="Furthermore, (too) many voices make the sound noisier, especially when using high-ish\r"
                    tHelp.txt+="minimum offtime values. Therefore it often results in better audio quality if the number \r"
                    tHelp.txt+="of voices is limited. \r"
                    tHelp.txt+="This limit works by muting 'older' notes. If it's set to 1, only the most recent note is audible. "
                    tHelp.txt+="\r"
                    tHelp.txt+="Value range: 1 - 16\r"
                }else if(sys1==b1.id||sys1==b2.id||sys1==b3.id||sys1==b4.id||sys1==b5.id||sys1==b6.id||sys1==b7.id||sys1==b8.id||sys1==b9.id||sys1==b0.id||sys1==bClear.id||sys1==bOK.id||sys1==tHideBack2.id)
                {
                    tHelp.txt+="Numpad\r\r"
                    tHelp.txt+="Use this numpad to modify any numeric fields on the page.\r"
                    tHelp.txt+="X clears the value. \r"
                    tHelp.txt+="ok applies it. If you select another value to edit, it's applied automatically. \r"
                }else
                {
                    // Nope, no new help text to be displayed
                    sys0=0
                }
                if(sys0!=0)
                {
                    currentHelp.val=sys1
                    vis tHelp,1
                    if(bReturn.txt!="âœ•")
                    {
                        bReturn.txt="âœ•"
                    }
                }
            }
        
        Touch Release Event
            // Check if help text is being displayed and shall be hidden again
            if(bReturn.val==1)
            {
                bReturn.val=0
                if(bReturn.txt!="â†")
                {
                    bReturn.txt="â†"
                }
                vis tHelp,0
                click fDraw,1
                currentHelp.val=-1
            }else if(sys1==btHelp.id)
            {
                click btHelp,0
            }
        
