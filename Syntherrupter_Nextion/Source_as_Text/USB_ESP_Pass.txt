Page USB_ESP_Pass
    Attributes
        ID    : 0
        Scope : local
        Locked: no
    
    Events
        Preinitialize Event
            // Prevent page refreshs until postinit
            ref_stop
            //
            // Load colors
            click fLoadColors,1
            //
            // Load Help Mode
            vis qrHelp,Help_Info.helpMode.val
            tempStr.txt=tTitle.txt
            showHelp.val=1
            click 0,1
            //
            // Enable page refreshs again
            ref_star
        
        Postinitialize Event
            // Tell the microcontroller: Mode Esp USB
            prints "meu",0
        
        Touch Press Event
            if(showHelp.val==0)
            {
                // Normal Operation
            }else
            {
                // Show Help
                qrHelp.txt="git.io/Jkfgx"
                click qrHelp,0
            }
        
Variable (string) tempStr
    Attributes
        ID            : 3
        Scope         : local
        Locked        : no
        Text          : 
        Max. Text Size: 32
    
Variable (int32) showHelp
    Attributes
        ID           : 4
        Scope        : local
        Locked       : no
        Initial value: 0
    
Text tTitle
    Attributes
        ID                 : 1
        Scope              : local
        Locked             : no
        Associated Keyboard: none
        Font ID            : 1
        Text               : ESP<->USB Passthrough
        Max. Text Size     : 25
    
Text tInfo
    Attributes
        ID                 : 2
        Scope              : local
        Locked             : no
        Associated Keyboard: none
        Font ID            : 0
        Text               : The ESP is now connected to the USB serial port. \r\nUse this to upload a new firmware or to \r\ncommunicate with the device. \r\nNotes:\r\n  * To leave passthrough mode, you need to \r\n     power cycle Syntherrupter.\r\n  * To upload a new ESP firmware you need to\r\n     pull ESPs GPIO0 pin to ground.
        Max. Text Size     : 384
    
QR Code qrHelp
    Attributes
        ID            : 5
        Scope         : local
        Locked        : no
        Text          : git.io/JkvOK
        Max. Text Size: 16
    
    Events
        Touch Release Event
            if(showHelp.val==0)
            {
                showHelp.val=1
                tempStr.txt=tTitle.txt
                tTitle.txt="Get Help/Link for..."
                // keep QR code on top
                ref qrHelp
                // Show modified title before stopping screen refreshs.
                doevents
                ref_stop
            }else
            {
                showHelp.val=0
                tTitle.txt=tempStr.txt
                // keep QR code on top
                ref qrHelp
                ref_star
            }
        
Hotspot fLoadColors
    Attributes
        ID    : 6
        Scope : local
        Locked: no
    
    Events
        Touch Press Event
            // Changes all page components according to the current color set.
            // Note: This component has to be the last component of the page.
            //
            // sys0: component id
            // sys1: component type
            // sys2: picture id offset for current color mode
            sys2=Settings.colorMode.val*Settings.picCount.val
            for(sys0=0;sys0<fLoadColors.id;sys0++)
            {
                // More convenient for typing
                sys1=b[sys0].type
                if(sys1==121)
                {
                    // Types that have bco
                    // page
                    if(b[sys0].bco!=Settings.backCol2.val)
                    {
                        b[sys0].bco=Settings.backCol.val
                    }
                }else if(sys1==54||sys1==59||sys1==116||sys1==55)
                {
                    // Types that have bco, pco, and sta:
                    // number, float, text, scroll text
                    if(b[sys0].sta==1)
                    {
                        if(b[sys0].bco!=Settings.backCol2.val)
                        {
                            b[sys0].bco=Settings.backCol.val
                            b[sys0].pco=Settings.frontCol.val
                        }else
                        {
                            b[sys0].pco=Settings.frontCol2.val
                        }
                    }
                }else if(sys1==98||sys1==53)
                {
                    // Types that have pco, pic, pco2, pic2, sta:
                    // button, dual-state button
                    if(b[sys0].sta==2)
                    {
                        b[sys0].pco=Settings.frontCol.val
                        b[sys0].pco2=Settings.backCol.val
                        b[sys0].pic=b[sys0].pic%Settings.picCount.val
                        b[sys0].pic+=sys2
                        b[sys0].pic2=b[sys0].pic+1
                    }
                }else if(sys1==58)
                {
                    // Types that have bco, pco
                    // QR Code
                    b[sys0].bco=Settings.backCol.val
                    b[sys0].pco=Settings.qrFrontCol.val
                }else if(sys1==1)
                {
                    // Types that have pic, pic2:
                    // slider
                    b[sys0].pic=b[sys0].pic%Settings.picCount.val
                    b[sys0].pic+=sys2
                    b[sys0].pic2=b[sys0].pic2%Settings.picCount.val
                    b[sys0].pic2+=sys2
                }
            }
        
