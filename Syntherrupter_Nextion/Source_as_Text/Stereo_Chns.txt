Page Stereo_Chns
    Attributes
        ID               : 0
        Scope            : local
        Send Component ID: disabled
        Locked           : no
    
    Events
        Preinitialize Event
            // Prevent page refreshs until postinit
            ref_stop
            //
            // Load colors
            click fLoadColors,1
            click fLoadModes,1
            //
            // Display username
            if(User_Settings.userNum.val==0)
            {
                tUser.txt=" "+User_Settings.u0Name.txt
            }else if(User_Settings.userNum.val==1)
            {
                tUser.txt=" "+User_Settings.u1Name.txt
            }else if(User_Settings.userNum.val==2)
            {
                tUser.txt=" "+User_Settings.u2Name.txt
            }
            //
            // functions shall not be visible
            vis fLoadModes,0
            vis fLoadColors,0
            vis fConvBtnState,0
            vis fCheck,0
            vis fMapping,0
            vis fDraw,0
            vis idle,0
            vis fEvents,0
            //
            // Properly hide the help stuff.
            vis hHelp,0
            vis tHelp,0
            //
            // Load button hold time
            tmResetHold.tim=Other_Settings.nHoldTime.val
            //
            // Set newValTargetId to idle
            newValTargetId.val=idle.id
            //
            // Enable page refreshs again
            ref_star
        
        Postinitialize Event
            //
            // Initialize page state and drawings
            btChn0.val=1
            channel.val=0
            click fDraw,1
            // See events
            eventStep.val=6
            click fEvents,1
        
        Touch Press Event
            if(Other_Settings.nBackOff.val!=0)
            {
                // Default "stop" action.
                // Set ontime and duty to 0 for all modes. See fSysex for details
                // Disable all modes as well.
                printh f0 00 26 06 01 7f 20 00 00 7f 00 00 00 00 00 f7
                printh f0 00 26 05 01 7f 21 00 00 7f 00 00 00 00 00 f7
                printh f0 00 26 05 01 7f 22 00 00 7f 00 00 00 00 00 f7
                // Set all ontime and duty settings of all pages to 0.
                // First come the global variables then the local variables.
                Simple.ontime.val=0
                Simple.duty.val=0
                Simple.set1.val=Simple.set1.val&0x0000ffff
                Simple.set2.val=Simple.set2.val&0x0000ffff
                Simple.set3.val=Simple.set3.val&0x0000ffff
                Simple.set4.val=Simple.set4.val&0x0000ffff
                Simple.set5.val=Simple.set5.val&0x0000ffff
                Simple.set6.val=Simple.set6.val&0x0000ffff
                MIDI_Live.ontime.val=0
                MIDI_Live.duty.val=0
                MIDI_Live.set1.val=0
                MIDI_Live.set2.val=0
                MIDI_Live.set3.val=0
                MIDI_Live.set4.val=0
                MIDI_Live.set5.val=0
                MIDI_Live.set6.val=0
                Lightsaber.ontime.val=0
                Lightsaber.ontimes12.val=0
                Lightsaber.ontimes34.val=0
                Lightsaber.ontimes56.val=0
            }
        
Variable (int32) currentHelp
    Attributes
        ID   : 12
        Scope: local
        Value: 4294967295
    
Variable (int32) origin
    Attributes
        ID   : 14
        Scope: global
        Value: 0
    
Variable (int32) mapMode
    Attributes
        ID   : 27
        Scope: local
        Value: 0
    
Variable (int32) newSelect
    Attributes
        ID   : 28
        Scope: local
        Value: 0
    
Variable (int32) newValTargetId
    Attributes
        ID   : 29
        Scope: local
        Value: 68
    
Variable (int32) tmp1
    Attributes
        ID   : 30
        Scope: local
        Value: 0
    
Variable (int32) tmp2
    Attributes
        ID   : 31
        Scope: local
        Value: 0
    
Variable (int32) tmp3
    Attributes
        ID   : 32
        Scope: local
        Value: 0
    
Variable (int32) tmp4
    Attributes
        ID   : 33
        Scope: local
        Value: 0
    
Variable (int32) chnOffset
    Attributes
        ID   : 34
        Scope: local
        Value: 0
    
Variable (int32) channel
    Attributes
        ID   : 35
        Scope: local
        Value: 0
    
Variable (int32) chn0Config
    Attributes
        ID   : 37
        Scope: global
        Value: 146807050
    
Variable (int32) chn1Config
    Attributes
        ID   : 38
        Scope: global
        Value: 684005642
    
Variable (int32) chn2Config
    Attributes
        ID   : 39
        Scope: global
        Value: 415570186
    
Variable (int32) chn3Config
    Attributes
        ID   : 40
        Scope: global
        Value: 952441098
    
Variable (int32) chn4Config
    Attributes
        ID   : 41
        Scope: global
        Value: 1220876554
    
Variable (int32) chn5Config
    Attributes
        ID   : 42
        Scope: global
        Value: 1489312010
    
Variable (int32) chn6Config
    Attributes
        ID   : 43
        Scope: global
        Value: 1757747466
    
Variable (int32) chn7Config
    Attributes
        ID   : 44
        Scope: global
        Value: 415575326
    
Variable (int32) chn8Config
    Attributes
        ID   : 45
        Scope: global
        Value: 311536926
    
Variable (int32) chn9Config
    Attributes
        ID   : 46
        Scope: global
        Value: 931802398
    
Variable (int32) chn10Config
    Attributes
        ID   : 47
        Scope: global
        Value: 890187038
    
Variable (int32) chn11Config
    Attributes
        ID   : 48
        Scope: global
        Value: 890179418
    
Variable (int32) chn12Config
    Attributes
        ID   : 49
        Scope: global
        Value: 534790016
    
Variable (int32) chn13Config
    Attributes
        ID   : 50
        Scope: global
        Value: 1071660928
    
Variable (int32) chn14Config
    Attributes
        ID   : 51
        Scope: global
        Value: 1340096384
    
Variable (int32) chn15Config
    Attributes
        ID   : 52
        Scope: global
        Value: 1608531840
    
Variable (int32) loading
    Attributes
        ID   : 53
        Scope: local
        Value: 0
    
Variable (int32) l1
    Attributes
        ID   : 54
        Scope: local
        Value: 0
    
Variable (int32) l2
    Attributes
        ID   : 55
        Scope: local
        Value: 0
    
Variable (int32) l3
    Attributes
        ID   : 56
        Scope: local
        Value: 0
    
Variable (int32) l4
    Attributes
        ID   : 57
        Scope: local
        Value: 0
    
Variable (int32) eventStep
    Attributes
        ID   : 94
        Scope: local
        Value: 0
    
Number fConvBtnState
    Attributes
        ID                 : 21
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Value              : 0
    
    Events
        Touch Press Event
            // Store button state in variable. Bit n corresponds to channel n.
            // sys0 only used because shorter, meaning better readable.
            sys0=0
            //sys0+=btChn15.val
            //sys0=sys0<<1
            //sys0+=btChn14.val
            //sys0=sys0<<1
            //sys0+=btChn13.val
            //sys0=sys0<<1
            //sys0+=btChn12.val
            //sys0=sys0<<1
            //sys0+=btChn11.val
            //sys0=sys0<<1
            //sys0+=btChn10.val
            //sys0=sys0<<1
            //sys0+=btChn9.val
            //sys0=sys0<<1
            //sys0+=btChn8.val
            //sys0=sys0<<1
            sys0+=btChn7.val
            sys0=sys0<<1
            sys0+=btChn6.val
            sys0=sys0<<1
            sys0+=btChn5.val
            sys0=sys0<<1
            sys0+=btChn4.val
            sys0=sys0<<1
            sys0+=btChn3.val
            sys0=sys0<<1
            sys0+=btChn2.val
            sys0=sys0<<1
            sys0+=btChn1.val
            sys0=sys0<<1
            sys0+=btChn0.val
            fConvBtnState.val=sys0
        
        Touch Release Event
            // Load button state from variable. Bit n corresponds to channel n.
            btChn0.val=fConvBtnState.val&1
            fConvBtnState.val>>=1
            btChn1.val=fConvBtnState.val&1
            fConvBtnState.val>>=1
            btChn2.val=fConvBtnState.val&1
            fConvBtnState.val>>=1
            btChn3.val=fConvBtnState.val&1
            fConvBtnState.val>>=1
            btChn4.val=fConvBtnState.val&1
            fConvBtnState.val>>=1
            btChn5.val=fConvBtnState.val&1
            fConvBtnState.val>>=1
            btChn6.val=fConvBtnState.val&1
            fConvBtnState.val>>=1
            btChn7.val=fConvBtnState.val&1
            fConvBtnState.val>>=1
            //btChn8.val=fConvBtnState.val&1
            //fConvBtnState.val>>=1
            //btChn9.val=fConvBtnState.val&1
            //fConvBtnState.val>>=1
            //btChn10.val=fConvBtnState.val&1
            //fConvBtnState.val>>=1
            //btChn11.val=fConvBtnState.val&1
            //fConvBtnState.val>>=1
            //btChn12.val=fConvBtnState.val&1
            //fConvBtnState.val>>=1
            //btChn13.val=fConvBtnState.val&1
            //fConvBtnState.val>>=1
            //btChn14.val=fConvBtnState.val&1
            //fConvBtnState.val>>=1
            //btChn15.val=fConvBtnState.val&1
            //fConvBtnState.val>>=1
        
Number mapInL
    Attributes
        ID                 : 77
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Value              : 40
    
    Events
        Touch Press Event
            // Reset push state of last selected value
            b[newValTargetId.val].bco=tTitle.bco
            b[newValTargetId.val].pco=tTitle.pco
            // Mark this field as pushed
            newValTargetId.val='&id&'
            b[newValTargetId.val].bco=tTitle.pco
            b[newValTargetId.val].pco=tTitle.bco
            // A new value has been selected
            newSelect.val=1
            // Check values
            click fCheck,0
        
Number mapInH
    Attributes
        ID                 : 78
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Value              : 80
    
    Events
        Touch Press Event
            // Reset push state of last selected value
            b[newValTargetId.val].bco=tTitle.bco
            b[newValTargetId.val].pco=tTitle.pco
            // Mark this field as pushed
            newValTargetId.val='&id&'
            b[newValTargetId.val].bco=tTitle.pco
            b[newValTargetId.val].pco=tTitle.bco
            // A new value has been selected
            newSelect.val=1
            // Check values
            click fCheck,0
        
Number mapOutL
    Attributes
        ID                 : 79
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Value              : 20
    
    Events
        Touch Press Event
            // Reset push state of last selected value
            b[newValTargetId.val].bco=tTitle.bco
            b[newValTargetId.val].pco=tTitle.pco
            // Mark this field as pushed
            newValTargetId.val='&id&'
            b[newValTargetId.val].bco=tTitle.pco
            b[newValTargetId.val].pco=tTitle.bco
            // A new value has been selected
            newSelect.val=1
            // Check values
            click fCheck,0
        
Number mapOutH
    Attributes
        ID                 : 80
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Value              : 70
    
    Events
        Touch Press Event
            // Reset push state of last selected value
            b[newValTargetId.val].bco=tTitle.bco
            b[newValTargetId.val].pco=tTitle.pco
            // Mark this field as pushed
            newValTargetId.val='&id&'
            b[newValTargetId.val].bco=tTitle.pco
            b[newValTargetId.val].pco=tTitle.bco
            // A new value has been selected
            newSelect.val=1
            // Check values
            click fCheck,0
        
Text tHelp
    Attributes
        ID                 : 1
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Text               : 
        Max. Text Size     : 1300
    
    Events
        Touch Press Event
            // This object is only visible in help mode. No need to be "transparent" to clicks in normal operation.
            click bReturn,0
        
Text tNotePos
    Attributes
        ID                 : 2
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Text               : Note Number
        Max. Text Size     : 30
    
    Events
        Touch Press Event
            // Make this object "transparent" for clicks and click background.
            click 0,1
        
Text t0
    Attributes
        ID                 : 3
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Text               : 0
        Max. Text Size     : 20
    
    Events
        Touch Press Event
            // Make this object "transparent" for clicks and click background.
            click 0,1
        
Text t127
    Attributes
        ID                 : 4
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Text               : 127
        Max. Text Size     : 20
    
    Events
        Touch Press Event
            // Make this object "transparent" for clicks and click background.
            click 0,1
        
Text tStereoPos
    Attributes
        ID                 : 5
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Text               : Stereo Position
        Max. Text Size     : 30
    
    Events
        Touch Press Event
            // Make this object "transparent" for clicks and click background.
            click 0,1
        
Text tL
    Attributes
        ID                 : 6
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Text               : L
        Max. Text Size     : 20
    
    Events
        Touch Press Event
            // Make this object "transparent" for clicks and click background.
            click 0,1
        
Text tR
    Attributes
        ID                 : 7
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Text               : R
        Max. Text Size     : 20
    
    Events
        Touch Press Event
            // Make this object "transparent" for clicks and click background.
            click 0,1
        
Text tHideBack3
    Attributes
        ID                 : 8
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Text               :  
        Max. Text Size     : 1
    
    Events
        Touch Press Event
            // This is just to hide the background around the sliders so that you do not turn the outputs off by accident.
        
Text tHideBack2
    Attributes
        ID                 : 15
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Text               :  
        Max. Text Size     : 1
    
    Events
        Touch Press Event
            // This is just to hide the background around the sliders so that you do not turn the outputs off by accident.
        
Text tHideBack
    Attributes
        ID                 : 16
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Text               :  
        Max. Text Size     : 1
    
    Events
        Touch Press Event
            // This is just to hide the background around the sliders so that you do not turn the outputs off by accident.
        
Text idle
    Attributes
        ID                 : 17
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Text               : i
        Max. Text Size     : 1
    
Text tTitle
    Attributes
        ID                 : 19
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Text               : Channel Stereo Settings
        Max. Text Size     : 30
    
    Events
        Touch Press Event
            // Make this object "transparent" for clicks and click background.
            click 0,1
        
Text tUser
    Attributes
        ID                 : 22
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Text               :  Guest
        Max. Text Size     : 32
    
    Events
        Touch Press Event
            // Make this object "transparent" for clicks and click background.
            click 0,1
        
Text tMSI
    Attributes
        ID                 : 23
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Text               : Simple
        Max. Text Size     : 16
    
    Events
        Touch Press Event
            // Make this object "transparent" for clicks and click background.
            click 0,1
        
Text tMML
    Attributes
        ID                 : 24
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Text               : MIDI Live
        Max. Text Size     : 16
    
    Events
        Touch Press Event
            // Make this object "transparent" for clicks and click background.
            click 0,1
        
Text tMLS
    Attributes
        ID                 : 25
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Text               : Lightsaber
        Max. Text Size     : 16
    
    Events
        Touch Press Event
            // Make this object "transparent" for clicks and click background.
            click 0,1
        
Text tChn
    Attributes
        ID                 : 59
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Text               : MIDI Channel
        Max. Text Size     : 30
    
    Events
        Touch Press Event
            // Make this object "transparent" for clicks and click background.
            click 0,1
        
Text tChnMode
    Attributes
        ID                 : 69
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Text               : Channel Mode
        Max. Text Size     : 30
    
    Events
        Touch Press Event
            // Make this object "transparent" for clicks and click background.
            click 0,1
        
Text tNoteRange
    Attributes
        ID                 : 73
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Text               : Note Range
        Max. Text Size     : 30
    
    Events
        Touch Press Event
            // Make this object "transparent" for clicks and click background.
            click 0,1
        
Text tTo
    Attributes
        ID                 : 74
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Text               : to
        Max. Text Size     : 3
    
    Events
        Touch Press Event
            // Make this object "transparent" for clicks and click background.
            click 0,1
        
Text tStereo
    Attributes
        ID                 : 75
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Text               : Stereo Range
        Max. Text Size     : 30
    
    Events
        Touch Press Event
            // Make this object "transparent" for clicks and click background.
            click 0,1
        
Text tTo2
    Attributes
        ID                 : 76
        Scope              : local
        Send Component ID  : disabled
        Associated Keyboard: none
        Text               : to
        Max. Text Size     : 3
    
    Events
        Touch Press Event
            // Make this object "transparent" for clicks and click background.
            click 0,1
        
Progress Bar lNoteRange
    Attributes
        ID               : 9
        Scope            : local
        Send Component ID: disabled
        Value            : 100
    
Progress Bar lStereoRange
    Attributes
        ID               : 10
        Scope            : local
        Send Component ID: disabled
        Value            : 100
    
Button bReturn
    Attributes
        ID               : 20
        Scope            : local
        Send Component ID: disabled
        State            : unpressed
        Text             : â†
        Max. Text Size   : 3
    
    Events
        Touch Release Event
            page origin.val
        
Button bChnRange
    Attributes
        ID               : 68
        Scope            : local
        Send Component ID: disabled
        State            : unpressed
        Text             : 9-16
        Max. Text Size   : 6
    
    Events
        Touch Release Event
            if(chnOffset.val==0)
            {
                '&txt&'="1-8"
                chnOffset.val=8
                btChn0.txt="9"
                btChn1.txt="10"
                btChn2.txt="11"
                btChn3.txt="12"
                btChn4.txt="13"
                btChn5.txt="14"
                btChn6.txt="15"
                btChn7.txt="16"
                if(channel.val>=8)
                {
                    // Make sure the button is still lit if switching back and forth between channel ranges.
                    sys0=btChn0.id+channel.val-8
                    b[sys0].val=1
                }
            }else
            {
                '&txt&'="9-16"
                chnOffset.val=0
                btChn0.txt="1"
                btChn1.txt="2"
                btChn2.txt="3"
                btChn3.txt="4"
                btChn4.txt="5"
                btChn5.txt="6"
                btChn6.txt="7"
                btChn7.txt="8"
                if(channel.val<8)
                {
                    // Make sure the button is still lit if switching back and forth between channel ranges.
                    sys0=btChn0.id+channel.val
                    b[sys0].val=1
                }
            }
        
Button bChnMode
    Attributes
        ID               : 70
        Scope            : local
        Send Component ID: disabled
        State            : unpressed
        Text             : Mapping
        Max. Text Size   : 10
    
    Events
        Touch Press Event
            // Here only the mode number is adjusted. This is such that other functions can adjust the
            // value as well and call the touch release event without triggering another change of the
            // value.
            if(mapMode.val==0)
            {
                mapMode.val=2
            }else if(mapMode.val==2)
            {
                mapMode.val=1
            }else if(mapMode.val>=1&&mapMode.val<=6) // 2 is already excluded
            {
                mapMode.val=0
            }
        
        Touch Release Event
            eventStep.val=5
            click fEvents,1
        
Button bMapMode
    Attributes
        ID               : 71
        Scope            : local
        Send Component ID: disabled
        State            : unpressed
        Text             : Individual
        Max. Text Size   : 10
    
    Events
        Touch Press Event
            // Here only the mode number is adjusted. This is such that other functions can adjust the
            // value as well and call the touch release event without triggering another change of the
            // value.
            if(mapMode.val==1)
            {
                mapMode.val=3
            }else if(mapMode.val==3)
            {
                mapMode.val=4
            }else if(mapMode.val==4)
            {
                mapMode.val=5
            }else if(mapMode.val==5)
            {
                mapMode.val=6
            }else if(mapMode.val==6)
            {
                mapMode.val=1
            }
        
        Touch Release Event
            eventStep.val=4
            click fEvents,1
        
Button bReset
    Attributes
        ID               : 72
        Scope            : local
        Send Component ID: disabled
        State            : unpressed
        Text             : Reset
        Max. Text Size   : 10
    
    Events
        Touch Press Event
            tmResetHold.en=1
        
        Touch Release Event
            tmResetHold.en=0
            mapMode.val=0
            mapInL.val=0
            mapInH.val=127
            mapOutL.val=0
            mapOutH.val=127
            // See events
            eventStep.val=3
            click fEvents,1
        
Button b0
    Attributes
        ID               : 81
        Scope            : local
        Send Component ID: disabled
        State            : unpressed
        Text             : 0
        Max. Text Size   : 1
    
    Events
        Touch Release Event
            if(newSelect.val!=0)
            {
                newSelect.val=0
                b[newValTargetId.val].val=0
            }else
            {
                b[newValTargetId.val].val*=10
            }
        
Button b1
    Attributes
        ID               : 82
        Scope            : local
        Send Component ID: disabled
        State            : unpressed
        Text             : 1
        Max. Text Size   : 1
    
    Events
        Touch Release Event
            if(newSelect.val!=0)
            {
                newSelect.val=0
                b[newValTargetId.val].val=0
            }else
            {
                b[newValTargetId.val].val*=10
            }
            b[newValTargetId.val].val+=1
        
Button b2
    Attributes
        ID               : 83
        Scope            : local
        Send Component ID: disabled
        State            : unpressed
        Text             : 2
        Max. Text Size   : 1
    
    Events
        Touch Release Event
            if(newSelect.val!=0)
            {
                newSelect.val=0
                b[newValTargetId.val].val=0
            }else
            {
                b[newValTargetId.val].val*=10
            }
            b[newValTargetId.val].val+=2
        
Button b3
    Attributes
        ID               : 84
        Scope            : local
        Send Component ID: disabled
        State            : unpressed
        Text             : 3
        Max. Text Size   : 1
    
    Events
        Touch Release Event
            if(newSelect.val!=0)
            {
                newSelect.val=0
                b[newValTargetId.val].val=0
            }else
            {
                b[newValTargetId.val].val*=10
            }
            b[newValTargetId.val].val+=3
        
Button b4
    Attributes
        ID               : 85
        Scope            : local
        Send Component ID: disabled
        State            : unpressed
        Text             : 4
        Max. Text Size   : 1
    
    Events
        Touch Release Event
            if(newSelect.val!=0)
            {
                newSelect.val=0
                b[newValTargetId.val].val=0
            }else
            {
                b[newValTargetId.val].val*=10
            }
            b[newValTargetId.val].val+=4
        
Button b5
    Attributes
        ID               : 86
        Scope            : local
        Send Component ID: disabled
        State            : unpressed
        Text             : 5
        Max. Text Size   : 1
    
    Events
        Touch Release Event
            if(newSelect.val!=0)
            {
                newSelect.val=0
                b[newValTargetId.val].val=0
            }else
            {
                b[newValTargetId.val].val*=10
            }
            b[newValTargetId.val].val+=5
        
Button b6
    Attributes
        ID               : 87
        Scope            : local
        Send Component ID: disabled
        State            : unpressed
        Text             : 6
        Max. Text Size   : 1
    
    Events
        Touch Release Event
            if(newSelect.val!=0)
            {
                newSelect.val=0
                b[newValTargetId.val].val=0
            }else
            {
                b[newValTargetId.val].val*=10
            }
            b[newValTargetId.val].val+=6
        
Button b7
    Attributes
        ID               : 88
        Scope            : local
        Send Component ID: disabled
        State            : unpressed
        Text             : 7
        Max. Text Size   : 1
    
    Events
        Touch Release Event
            if(newSelect.val!=0)
            {
                newSelect.val=0
                b[newValTargetId.val].val=0
            }else
            {
                b[newValTargetId.val].val*=10
            }
            b[newValTargetId.val].val+=7
        
Button b8
    Attributes
        ID               : 89
        Scope            : local
        Send Component ID: disabled
        State            : unpressed
        Text             : 8
        Max. Text Size   : 1
    
    Events
        Touch Release Event
            if(newSelect.val!=0)
            {
                newSelect.val=0
                b[newValTargetId.val].val=0
            }else
            {
                b[newValTargetId.val].val*=10
            }
            b[newValTargetId.val].val+=8
        
Button b9
    Attributes
        ID               : 90
        Scope            : local
        Send Component ID: disabled
        State            : unpressed
        Text             : 9
        Max. Text Size   : 1
    
    Events
        Touch Release Event
            if(newSelect.val!=0)
            {
                newSelect.val=0
                b[newValTargetId.val].val=0
            }else
            {
                b[newValTargetId.val].val*=10
            }
            b[newValTargetId.val].val+=9
        
Button bClear
    Attributes
        ID               : 91
        Scope            : local
        Send Component ID: disabled
        State            : unpressed
        Text             : X
        Max. Text Size   : 1
    
    Events
        Touch Release Event
            b[newValTargetId.val].val=0
        
Button bOK
    Attributes
        ID               : 92
        Scope            : local
        Send Component ID: disabled
        State            : unpressed
        Text             : ok
        Max. Text Size   : 2
    
    Events
        Touch Release Event
            b[newValTargetId.val].bco=tTitle.bco
            b[newValTargetId.val].pco=tTitle.pco
            newValTargetId.val=tTitle.id
            click fCheck,0
        
Dual-state Button btHelp
    Attributes
        ID               : 13
        Scope            : local
        Send Component ID: disabled
        State            : unpressed
        Text             : ?
        Max. Text Size   : 1
    
    Events
        Touch Release Event
            if(btHelp.val==0)
            {
                // In case something was displayed, get rid of it
                bReturn.val=1
                click hHelp,0
                // disable help overlay
                vis hHelp,0
            }else
            {
                vis hHelp,1
            }
            // Restore drawings
            click fDraw,1
            click fMapping,1
        
Dual-state Button btChn0
    Attributes
        ID               : 60
        Scope            : local
        Send Component ID: disabled
        State            : unpressed
        Text             : 1
        Max. Text Size   : 2
    
Dual-state Button btChn1
    Attributes
        ID               : 61
        Scope            : local
        Send Component ID: disabled
        State            : unpressed
        Text             : 2
        Max. Text Size   : 2
    
Dual-state Button btChn2
    Attributes
        ID               : 62
        Scope            : local
        Send Component ID: disabled
        State            : unpressed
        Text             : 3
        Max. Text Size   : 2
    
Dual-state Button btChn3
    Attributes
        ID               : 63
        Scope            : local
        Send Component ID: disabled
        State            : unpressed
        Text             : 4
        Max. Text Size   : 2
    
Dual-state Button btChn4
    Attributes
        ID               : 64
        Scope            : local
        Send Component ID: disabled
        State            : unpressed
        Text             : 5
        Max. Text Size   : 2
    
Dual-state Button btChn5
    Attributes
        ID               : 65
        Scope            : local
        Send Component ID: disabled
        State            : unpressed
        Text             : 6
        Max. Text Size   : 2
    
Dual-state Button btChn6
    Attributes
        ID               : 66
        Scope            : local
        Send Component ID: disabled
        State            : unpressed
        Text             : 7
        Max. Text Size   : 2
    
Dual-state Button btChn7
    Attributes
        ID               : 67
        Scope            : local
        Send Component ID: disabled
        State            : unpressed
        Text             : 8
        Max. Text Size   : 2
    
Hotspot fDraw
    Attributes
        ID               : 11
        Scope            : local
        Send Component ID: disabled
    
    Events
        Touch Press Event
            // Lines between channels, ranges, range preview
            sys0=tChn.x
            sys1=bChnRange.x+bChnRange.w
            sys2=bChnMode.y+bChnMode.h+b1.y
            sys2/=2
            line sys0,sys2,sys1,sys2,tTitle.pco
            sys2=bOK.y+bOK.h+t127.y
            sys2/=2
            line sys0,sys2,sys1,sys2,tTitle.pco
        
Hotspot fMapping
    Attributes
        ID               : 18
        Scope            : local
        Send Component ID: disabled
    
    Events
        Touch Press Event
            ref_stop
            // Clear previous drawings IN THIS AREA
            vis tHideBack3,1
            // Bring back the lines
            vis lStereoRange,1
            // Show/Hide elements
            if(mapMode.val==0||mapMode.val==2)
            {
                vis bMapMode,0
                vis tNoteRange,0
                vis mapInL,0
                vis mapInH,0
                vis tStereo,0
                vis mapOutL,0
                vis mapOutH,0
                vis tTo,0
                vis tTo2,0
                vis b1,0
                vis b2,0
                vis b3,0
                vis b4,0
                vis b5,0
                vis b6,0
                vis b7,0
                vis b8,0
                vis b9,0
                vis b0,0
                vis bClear,0
                vis bOK,0
                vis t0,0
                vis t127,0
                vis lNoteRange,0
                if(mapMode.val==0)
                {
                    vis tNotePos,1
                }else
                {
                    vis tNotePos,0
                }
            }else
            {
                vis bMapMode,1
                vis tNoteRange,1
                vis mapInL,1
                vis mapInH,1
                vis tStereo,1
                vis mapOutL,1
                vis mapOutH,1
                vis tTo,1
                vis tTo2,1
                vis b1,1
                vis b2,1
                vis b3,1
                vis b4,1
                vis b5,1
                vis b6,1
                vis b7,1
                vis b8,1
                vis b9,1
                vis b0,1
                vis bClear,1
                vis bOK,1
                vis t0,1
                vis t127,1
                vis lNoteRange,1
                vis tNotePos,1
            }
            ref_star
            // Force a refresh, otherwise the drawings won't appear on screen. Reasons.
            doevents
            //
            // Draw mapping ranges
            y0=lNoteRange.y+1
            y1=lStereoRange.y+1
            x0=mapInL.val*lNoteRange.w/127
            x0+=lNoteRange.x
            // We'll still need this later
            tmp1.val=x0
            x1=mapOutL.val*lStereoRange.w/127
            x1+=lStereoRange.x
            // We'll still need this later
            tmp3.val=x1
            sys0=mapOutL.val-mapInL.val
            if(mapMode.val>=1&&mapMode.val!=2&&mapMode.val<=6)
            {
                fill x0-1,y0-8,2,16,lNoteRange.pco
                //line x0,y0,x1,y1,lNoteRange.pco
                fill x1,y1-8,2,16,lNoteRange.pco
            }
            //
            x0=mapInH.val*lNoteRange.w/127
            x0+=lNoteRange.x
            // We'll still need this later
            tmp2.val=x0
            x1=mapOutH.val*lStereoRange.w/127
            x1+=lStereoRange.x
            // We'll still need this later
            tmp4.val=x1
            sys0=mapOutH.val-mapInH.val
            if(mapMode.val>=1&&mapMode.val!=2&&mapMode.val<=6)
            {
                fill x0-1,y0-12,2,24,lNoteRange.pco
                //line x0,y0,x1,y1,lNoteRange.pco
                fill x1,y1-12,2,24,lNoteRange.pco
                //  line x0-1,y0,x1-1,y1,lNoteRange.pco
                //  line x0,y0,x1,y1,lNoteRange.pco
                //  line x0+1,y0,x1+1,y1,lNoteRange.pco
                //
                // Draw example in- and output notes
                // Notes are placed at 1/12, 4/12, 9 /12, 10/12 of the range
                sys0=tmp2.val-tmp1.val
                sys0/=12
                sys1=sys0*1
                sys1+=tmp1.val
                l1.val=sys1
                cirs sys1,y0,lNoteRange.h+1,lNoteRange.pco
                sys1=sys0*4
                sys1+=tmp1.val
                l2.val=sys1
                cirs sys1,y0,lNoteRange.h+3,lNoteRange.pco
                sys1=sys0*9
                sys1+=tmp1.val
                l3.val=sys1
                cirs sys1,y0,lNoteRange.h+2,lNoteRange.pco
                sys1=sys0*10
                sys1+=tmp1.val
                l4.val=sys1
                cirs sys1,y0,lNoteRange.h,lNoteRange.pco
            }
            // Resulting stereo positions
            // Map Modes: 1: Individual, 3: Lowest, 4: Highest, 5: Average, 6: Loudest
            sys0=tmp4.val-tmp3.val
            sys0/=12
            // Depending on whether the map boundaries are flipped, this is either
            // the lowest or the highest note. (map modes 3 and 4)
            sys2=0
            if(mapMode.val==1)
            {
                sys2=1
            }
            if(tmp1.val<tmp2.val&&mapMode.val==3)
            {
                sys2=1
            }else if(tmp1.val>tmp2.val&&mapMode.val==4)
            {
                sys2=1
            }
            if(sys2!=0)
            {
                sys1=sys0*1
                sys1+=tmp3.val
                // Dot size. If multiple notes are merged, make it larger.
                sys2=lStereoRange.h+1
                if(mapMode.val!=1)
                {
                    sys2=lStereoRange.h+5
                    line l1.val,y0,sys1,y1,lNoteRange.pco
                    line l2.val,y0,sys1,y1,lNoteRange.pco
                    line l3.val,y0,sys1,y1,lNoteRange.pco
                    line l4.val,y0,sys1,y1,lNoteRange.pco
                }else
                {
                    line l1.val,y0,sys1,y1,lNoteRange.pco
                }
                cirs sys1,y1,sys2,lNoteRange.pco
            }
            // With no mapping, show that the note is "somewhere"
            if(mapMode.val==0||mapMode.val==1||mapMode.val==6)
            {
                sys1=sys0*4
                sys1+=tmp3.val
                // Dot size. If multiple notes are merged, make it larger.
                sys2=lStereoRange.h+3
                if(mapMode.val!=1)
                {
                    sys2=lStereoRange.h+5
                    if(mapMode.val!=0)
                    {
                        line l1.val,y0,sys1,y1,lNoteRange.pco
                        line l2.val,y0,sys1,y1,lNoteRange.pco
                        line l3.val,y0,sys1,y1,lNoteRange.pco
                        line l4.val,y0,sys1,y1,lNoteRange.pco
                    }
                }else
                {
                    line l2.val,y0,sys1,y1,lNoteRange.pco
                }
                cirs sys1,y1,sys2,lNoteRange.pco
            }
            if(mapMode.val==1)
            {
                sys1=sys0*9
                sys1+=tmp3.val
                line l3.val,y0,sys1,y1,lNoteRange.pco
                cirs sys1,y1,lStereoRange.h+2,lNoteRange.pco
            }
            // Depending on whether the map boundaries are flipped, this is either
            // the lowest or the highest note. (map modes 3 and 4)
            sys2=0
            if(mapMode.val==1)
            {
                sys2=1
            }
            if(tmp1.val<tmp2.val&&mapMode.val==4)
            {
                sys2=1
            }else if(tmp1.val>tmp2.val&&mapMode.val==3)
            {
                sys2=1
            }
            if(sys2!=0)
            {
                sys1=sys0*10
                sys1+=tmp3.val
                // Dot size. If multiple notes are merged, make it larger.
                sys2=lStereoRange.h
                if(mapMode.val!=1)
                {
                    sys2=lStereoRange.h+5
                    line l1.val,y0,sys1,y1,lNoteRange.pco
                    line l2.val,y0,sys1,y1,lNoteRange.pco
                    line l3.val,y0,sys1,y1,lNoteRange.pco
                    line l4.val,y0,sys1,y1,lNoteRange.pco
                }else
                {
                    line l4.val,y0,sys1,y1,lNoteRange.pco
                }
                cirs sys1,y1,sys2,lNoteRange.pco
            }
            if(mapMode.val==5)
            {
                sys1=sys0*6
                sys1+=tmp3.val
                // Dot size. If multiple notes are merged, make it larger.
                sys2=lStereoRange.h+2
                if(mapMode.val!=1)
                {
                    sys2=lStereoRange.h+5
                    line l1.val,y0,sys1,y1,lNoteRange.pco
                    line l2.val,y0,sys1,y1,lNoteRange.pco
                    line l3.val,y0,sys1,y1,lNoteRange.pco
                    line l4.val,y0,sys1,y1,lNoteRange.pco
                }
                cirs sys1,y1,sys2,lNoteRange.pco
            }
            if(mapMode.val==2)
            {
                sys2=lStereoRange.x+lStereoRange.w
                for(sys1=lStereoRange.x;sys1<sys2;sys1+=10)
                {
                    cirs sys1,y1,lStereoRange.h+2,lNoteRange.pco
                }
            }
        
Hotspot fLoadModes
    Attributes
        ID               : 26
        Scope            : local
        Send Component ID: disabled
    
    Events
        Touch Press Event
            // Load active modes
            sys0=Settings.activeModes.val&4
            if(sys0!=0)
            {
                // Lightsaber Mode is active
                tMLS.bco=Settings.backSelectCol2.val
            }
            //
            // Display all active modes
            sys0=Settings.activeModes.val&1
            if(sys0!=0)
            {
                // Simple Mode is active
                tMSI.bco=Settings.backSelectCol2.val
            }
            sys0=Settings.activeModes.val&2
            if(sys0!=0)
            {
                // MIDI Live Mode is active
                tMML.bco=Settings.backSelectCol2.val
            }
        
Hotspot fLoadColors
    Attributes
        ID               : 93
        Scope            : local
        Send Component ID: disabled
    
    Events
        Touch Press Event
            // Changes all page components according to the current color set.
            // Note: This component has to be the last component of the page.
            //
            // sys0: component id
            // sys1: component type
            // sys2: picture id offset for current color mode
            sys2=Settings.colorMode.val*Settings.picCount.val
            for(sys0=0;sys0<fLoadColors.id;sys0++)
            {
                // More convenient for typing
                sys1=b[sys0].type
                if(sys1==121)
                {
                    // Types that have bco
                    // page
                    if(b[sys0].bco==Settings.backCol2Deflt.val)
                    {
                        b[sys0].bco=Settings.backCol2.val
                    }else
                    {
                        b[sys0].bco=Settings.backCol.val
                    }
                }else if(sys1==54||sys1==59||sys1==116||sys1==55)
                {
                    // Types that have bco, pco, and sta:
                    // number, float, text, scroll text
                    if(b[sys0].sta==1)
                    {
                        if(b[sys0].bco==Settings.backCol2Deflt.val)
                        {
                            b[sys0].bco=Settings.backCol2.val
                            b[sys0].pco=Settings.frontCol2.val
                        }else
                        {
                            b[sys0].bco=Settings.backCol.val
                            b[sys0].pco=Settings.frontCol.val
                        }
                    }
                }else if(sys1==106)
                {
                    // Types that have pco, bco, sta (different)
                    // progress bar
                    if(b[sys0].sta==0)
                    {
                        if(b[sys0].bco==Settings.backCol2Deflt.val)
                        {
                            b[sys0].bco=Settings.backCol2.val
                            b[sys0].pco=Settings.frontCol2.val
                        }else
                        {
                            b[sys0].bco=Settings.backCol.val
                            b[sys0].pco=Settings.frontCol.val
                        }
                    }
                }else if(sys1==98||sys1==53)
                {
                    // Types that have pco, pic, pco2, pic2, sta:
                    // button, dual-state button
                    if(b[sys0].sta==2)
                    {
                        b[sys0].pco=Settings.frontCol.val
                        b[sys0].pco2=Settings.backCol.val
                        b[sys0].pic=b[sys0].pic%Settings.picCount.val
                        b[sys0].pic+=sys2
                        b[sys0].pic2=b[sys0].pic+1
                    }
                }else if(sys1==58)
                {
                    // Types that have bco, pco
                    // QR Code
                    b[sys0].bco=Settings.backCol.val
                    b[sys0].pco=Settings.qrFrontCol.val
                }else if(sys1==1)
                {
                    // Types that have pic, pic1, pic2:
                    // slider
                    b[sys0].pic=b[sys0].pic%Settings.picCount.val
                    b[sys0].pic+=sys2
                    b[sys0].pic1=b[sys0].pic
                    b[sys0].pic2=b[sys0].pic2%Settings.picCount.val
                    b[sys0].pic2+=sys2
                }
            }
        
Hotspot fEvents
    Attributes
        ID               : 95
        Scope            : local
        Send Component ID: disabled
    
    Events
        Touch Press Event
            // Nested click events of buttons trigger many page refreshes. Therefore you'd want to avoid them
            // as much as possible.
            //
            // Event chains:
            // ----- - -----      -------- 6 -------      -------- 5 -------     -------- 4 --------     ------- 3 -------     -------- 2 -------      ---- 1 ----
            // btChnX,0 -> fLoadStore,0 -> bChnMode,0 -> bMapMode,0 -> fMapping,1
            // bReset,0  -> fLoadStore,0 -> bChnMode,0 -> bMapMode,0 -> fMapping,1
            //                                                bChnMode,0 -> bMapMode,0 -> fMapping,1 -> fLoadStore,1 -> fNRP,1
            //                                                                          bMapMode,0 -> fMapping,1 -> fLoadStore,1 -> fNRP,1
            // fCheck,1 ->                                                                                 fMapping,1 -> fLoadStore,1 -> fNRP,1
            // btChnX,1 ->                                                                                                        fLoadStore,1 -> fNRP,1
            //
            if(eventStep.val>=6) // Load new value(s) from global variables
            {
                sys1=chn0Config.id+channel.val
                sys0=b[sys1].val
                mapInL.val=sys0&0x7f
                sys0>>=7
                mapInH.val=sys0&0x7f
                sys0>>=7
                mapOutL.val=sys0&0x7f
                sys0>>=7
                mapOutH.val=sys0&0x7f
                sys0>>=7
                mapMode.val=sys0&0x0f
            }
            if(eventStep.val>=5) // Update bChnMode button
            {
                if(mapMode.val==0)
                {
                    bChnMode.txt="Normal"
                    tNotePos.txt="MIDI pan gives"
                }else if(mapMode.val==2)
                {
                    bChnMode.txt="Omni"
                    tNotePos.txt="Note Number"
                }else if(mapMode.val>=1&&mapMode.val<=6) // 2 is already excluded
                {
                    bChnMode.txt="Mapping"
                    tNotePos.txt="Note Number"
                }
            }
            if(eventStep.val>=4) // Update bMapMode button
            {
                if(mapMode.val==1)
                {
                    bMapMode.txt="Individual"
                }else if(mapMode.val==3)
                {
                    bMapMode.txt="Lowest"
                }else if(mapMode.val==4)
                {
                    bMapMode.txt="Highest"
                }else if(mapMode.val==5)
                {
                    bMapMode.txt="Average"
                }else if(mapMode.val==6)
                {
                    bMapMode.txt="Loudest"
                }
            }
            if(eventStep.val>=3) // Draw preview at the bottom
            {
                // This is so much code, it's worth having it in a separate "function"
                click fMapping,1
            }
            if(eventStep.val<6)
            {
                if(eventStep.val>=2) // Store new values to global variables
                {
                    sys0=mapMode.val&0x0f
                    sys0<<=7
                    sys0|=mapOutH.val
                    sys0<<=7
                    sys0|=mapOutL.val
                    sys0<<=7
                    sys0|=mapInH.val
                    sys0<<=7
                    sys0|=mapInL.val
                    sys1=chn0Config.id+channel.val
                    b[sys1].val=sys0
                    loading.val=0
                }
                if(eventStep.val>=1) // Send new values to the microcontroller
                {
                    // Sends a Syntherrupter Non-Registered Parameter Channel Message
                    // that updates Syntherrupter with whatever has been changed on this page.
                    // Package format (See Syntherrupter Custom MIDI Messages documentation)
                    // Bx 63 NRP_NC 62 NRP_NF 06 DC 26 DF
                    // Bx: Channel Control Message for channel x. Using rolling status, this can be omitted in subsequent messages.
                    // Subsequent messages can omit NRP_NC or NRP_NF if that value has not changed.
                    //
                    sys0=0xB0|channel.val
                    prints sys0,1
                    // All NRPs here use NC=42dec=0x2a
                    printh 63 2a 62 00 06 00 26
                    prints mapMode.val,1
                    printh 62 01 06
                    prints mapInH.val,1
                    printh 26
                    prints mapInL.val,1
                    printh 62 02 06
                    prints mapOutH.val,1
                    printh 26
                    prints mapOutL.val,1
                }
            }
        
Hotspot fCheck
    Attributes
        ID               : 96
        Scope            : local
        Send Component ID: disabled
    
    Events
        Touch Release Event
            // Settings must stay in certain ranges. this function checks and fixes them.
            //
            if(mapInL.val<0)
            {
                mapInL.val=0
            }else if(mapInL.val>127)
            {
                mapInL.val=127
            }
            if(mapInH.val<0)
            {
                mapInH.val=0
            }else if(mapInH.val>127)
            {
                mapInH.val=127
            }
            if(mapOutL.val<0)
            {
                mapOutL.val=0
            }else if(mapOutL.val>127)
            {
                mapOutL.val=127
            }
            if(mapOutH.val<0)
            {
                mapOutH.val=0
            }else if(mapOutH.val>127)
            {
                mapOutH.val=127
            }
            // See events
            eventStep.val=3
            click fEvents,1
        
Hotspot hHelp
    Attributes
        ID               : 97
        Scope            : local
        Send Component ID: disabled
    
    Events
        Touch Press Event
            // Determine component/feature that would have been touched.
            sys1=0
            for(sys0=fLoadColors.id;sys0>=0;sys0--)
            {
                // Ignore hotspots, touchcaps, variables
                if(b[sys0].type!=5&&b[sys0].type!=51&&b[sys0].type!=52&&b[sys0].type!=109)
                {
                    x0=b[sys0].x
                    y0=b[sys0].y
                    x1=b[sys0].w
                    y1=b[sys0].h
                    x1+=x0
                    y1+=y0
                    if(tch0>=x0&&tch0<x1&&tch1>=y0&&tch1<y1)
                    {
                        sys1=sys0
                        // abort loop
                        sys0=-1
                    }
                }
            }
            if(currentHelp.val>=0&&sys1==bReturn.id)
            {
                // Return button has been pressed while help is being displayed. This means
                // hide the help text again (see touch release event)
                bReturn.val=1
            }else if(sys1==btHelp.id)
            {
                // Question mark button has been pressed. Disable help mode (see touch release event).
                btHelp.val=0
            }else if(currentHelp.val>=0)
            {
                // Help is being displayed and something else has been pressed.
                // Act as if the page background had been pressed.
                // Note: this can make other UI elements to "pop up", therefore bring the text back on top
                // TODO: Prevent flickering!
                click 0,1
                doevents
                ref tHelp
            }else
            {
                // Show help according to what has been touched.
                // Assume that some new help will be displayed
                sys0=1
                tHelp.txt=""
                if(Settings.firstHelp.val!=0)
                {
                    Settings.firstHelp.val=0
                    tHelp.txt+="Help Mode Enabled \r\r"
                    tHelp.txt+="You've enabled the on-screen help by pressing the question mark at the top right \r"
                    tHelp.txt+="corner. As long as it's active, you can press any part of the UI and get a description \r"
                    tHelp.txt+="of what that button/slider/... does. \r"
                    tHelp.txt+="Press the X button at the top left to get help on another part of the UI. \r"
                    tHelp.txt+="Press the question mark at the top right to leave help mode and resume normal\r"
                    tHelp.txt+="operation. \r"
                    tHelp.txt+="Press any other part of the screen, including this description, to disable all outputs. \r"
                    tHelp.txt+="For more information, check the help on the page background.\r"
                    tHelp.txt+=" \r"
                    tHelp.txt+="This tip won't reappear until you reset or power cycle Syntherrupter. \r"
                }else if(sys1==tTitle.id)
                {
                    tHelp.txt+="Channel Stereo Settings\r\r"
                    tHelp.txt+="Configure where and how a channel and its notes play on the stereo scale. \r"
                    tHelp.txt+="You should especially check the help on the channel mode and on the drawing at the\r"
                    tHelp.txt+="bottom. Once you're familiar with the preview at the bottom, play around with the settings\r"
                    tHelp.txt+="and see what they do. \r"
                }else if(sys1==tUser.id)
                {
                    tHelp.txt+="Current User \r\r"
                    tHelp.txt+="The name of the currently active user. This determines the range within which you \r"
                    tHelp.txt+="can operate Syntherrupter. Go to the main menu to change the current user. \r"
                }else if(sys1==tMSI.id||sys1==tMML.id||sys1==tMLS.id)
                {
                    tHelp.txt+="Active Modes \r\r"
                    tHelp.txt+="Modes can stay active even if you leave the corresponding page. Active modes are \r"
                    tHelp.txt+="highlighted at the bottom right.  \r"
                }else if(sys1==0||sys1==tHelp.id)
                {
                    tHelp.txt+="Page background \r\r"
                    tHelp.txt+="The page background, textboxes and non-interactive elements in general shut down \r"
                    tHelp.txt+="all outputs if you press them. This allows you to quickly stop all outputs and all \r"
                    tHelp.txt+="modes if something goes wrong. \r"
                    tHelp.txt+="Note however, that unplugging is the only actually safe way to ensure a complete \r"
                    tHelp.txt+="shutdown! \r"
                    tHelp.txt+="This feature can be temporarily disabled in the general settings. After a reset or \r"
                    tHelp.txt+="power-cycle it will be enabled again.\r"
                }else if(sys1==bReturn.id)
                {
                    tHelp.txt+="Return Button\r\r"
                    tHelp.txt+="Return to the previous page\r"
                    tHelp.txt+="\r"
                    tHelp.txt+="If you want to leave help mode, press the question mark at the top left. \r"
                }else if(sys1>=tChn.id&&sys1<=bChnRange.id)
                {
                    tHelp.txt+="MIDI Channel selection\r\r"
                    tHelp.txt+="Select the MIDI channel you want to configure. \r"
                    tHelp.txt+="Due to the limited space, only 8 of the 16 channels are shown. The button at the right\r"
                    tHelp.txt+="allows you to change the channels that are displayed. \r"
                }else if(sys1>=tChnMode.id&&sys1<=bReset.id)
                {
                    tHelp.txt+="Channel Stereo Mode\r\r"
                    tHelp.txt+="If you're familiar with MIDI you might know that a MIDI channel always has one specific\r"
                    tHelp.txt+="stereo location. Basically where the player sits with its instrument. \r"
                    tHelp.txt+="Syntherrupter offers further options, that allows some automatic mapping based on the\r"
                    tHelp.txt+="note pitch. Imagine you're sitting in front of a piano. Low notes come from your left, \r"
                    tHelp.txt+="high notes from your right. That's one possible effect you can recreate with these options. \r"
                    tHelp.txt+="\r"
                    tHelp.txt+="'Normal':   Entire channel plays at the position defined by the MIDI Pan value. \r"
                    tHelp.txt+="'Omni':      Entire channel plays 'everywhere'. Stereo location of the coils doesn't matter. \r"
                    tHelp.txt+="'Mapping': Stereo position is defined by the note pitch(es) and the range settings below..\r"
                    tHelp.txt+="    Individual: Each note on this channel is individually mapped based on its pitch. \r"
                    tHelp.txt+="    Lowest:     All notes are mapped based on the pitch of the lowest note that's playing. \r"
                    tHelp.txt+="    Highest:    All notes are mapped based on the pitch of the highest note that's playing. \r"
                    tHelp.txt+="    Average:   All notes are mapped based on the average pitch of all active notes. \r"
                    tHelp.txt+="    Loudest:    All notes are mapped based on the pitch of the loudest note that's playing.\r"
                }else if(sys1>=tNoteRange.id&&sys1<=mapOutH.id)
                {
                    tHelp.txt+="Mapping Configuration\r\r"
                    tHelp.txt+="The input range is mapped to the output range. Inverting either range is possible. \r"
                    tHelp.txt+="It hopefully becomes obvious with the preview at the bottom. \r"
                }else if(sys1>=tNotePos.id&&sys1<=lStereoRange.id)
                {
                    tHelp.txt+="Preview of the Stereo Configuration\r\r"
                    tHelp.txt+="The preview demonstrates how the current stereo configuration works. It assumes that\r"
                    tHelp.txt+="the channel currently plays 4 notes. The 0-127 scale ('Note Number') stands for their pitch,\r"
                    tHelp.txt+="the size of the dot for the volume/velocity of each note. \r"
                    tHelp.txt+="The small and large vertical bars mark the input and output mapping ranges. \r"
                    tHelp.txt+="The dots on the stereo scale mark where and how loud the given notes will play. \r"
                }else if(sys1>=b0.id&&sys1<=bOK.id)
                {
                    tHelp.txt+="Numpad\r\r"
                    tHelp.txt+="Use this numpad to modify the note and stereo ranges..\r"
                    tHelp.txt+="X clears the value. \r"
                    tHelp.txt+="ok applies it. If you select another value to edit, it's applied automatically. \r"
                }else
                {
                    // Nope, no new help text to be displayed
                    sys0=0
                }
                if(sys0!=0)
                {
                    currentHelp.val=sys1
                    vis tHelp,1
                    if(bReturn.txt!="âœ•")
                    {
                        bReturn.txt="âœ•"
                    }
                }
            }
        
        Touch Release Event
            // Check if help text is being displayed and shall be hidden again
            if(bReturn.val==1)
            {
                bReturn.val=0
                if(bReturn.txt!="â†")
                {
                    bReturn.txt="â†"
                }
                vis tHelp,0
                click fDraw,1
                click fMapping,1
                currentHelp.val=-1
            }else if(sys1==btHelp.id)
            {
                click btHelp,0
            }
        
Timer tmResetHold
    Attributes
        ID         : 58
        Scope      : local
        Period (ms): 400
        Enabled    : no
    
    Events
        Timer Event
            // Repeat reset for all channels
            '&en&'=0
            for(channel.val=0;channel.val<16;channel.val++)
            {
                click bReset,0
            }
        
TouchCap touchCap
    Attributes
        ID   : 36
        Scope: local
        Value: 0
    
    Events
        Touch Press Event
            if('&val&'>=btChn0.id&&'&val&'<=bChnRange.id)
            {
                // The part below shall also happen when clicking bChnRange, but not the following.
                if('&val&'<=btChn7.id)
                {
                    // Changing channels, send data of the current one.
                    eventStep.val=2
                    click fEvents,1
                }
                // Unpress all buttons except the current one
                // Note: Since this event happens before the button event, the current button
                // has not yet switched to 1 and thus must not be toggled here.
                btChn0.val=0
                btChn1.val=0
                btChn2.val=0
                btChn3.val=0
                btChn4.val=0
                btChn5.val=0
                btChn6.val=0
                btChn7.val=0
            }
        
        Touch Release Event
            if('&val&'>=btChn0.id&&'&val&'<=btChn7.id)
            {
                // Set current channel and load corresponding settings
                channel.val='&val&'-btChn0.id+chnOffset.val
                eventStep.val=6
                click fEvents,1
            }
        
